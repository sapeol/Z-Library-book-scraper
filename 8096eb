
<!DOCTYPE html>
<html>
    <head>
        <script type="text/javascript">
            navigator.sayswho = (function(){
                var ua= navigator.userAgent, tem,
                M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
                if(/trident/i.test(M[1])){
                    tem=  /\brv[ :]+(\d+)/g.exec(ua) || [];
                    return 'IE '+(tem[1] || '');
                }
                if(M[1]=== 'Chrome'){
                    tem= ua.match(/\b(OPR|Edge)\/(\d+)/);
                    if(tem!= null) return tem.slice(1).join(' ').replace('OPR', 'Opera');
                }
                M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
                if((tem= ua.match(/version\/(\d+)/i))!= null) M.splice(1, 1, tem[1]);
                return M.join(' ');
            })();

                    </script>

        <title>Learning Web Development with React and Bootstrap | Harmeet Singh, Mehul Bhatt | download</title>
<base href="/">

                        <meta charset="utf-8">		                       
                        <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1">
                        <meta name="title" content="Learning Web Development with React and Bootstrap | Harmeet Singh, Mehul Bhatt | download">
			<meta name="description" content="Learning Web Development with React and Bootstrap | Harmeet Singh, Mehul Bhatt | download | Z-Library. Download books for free. Find books">
			<meta name="robots" content="index,all">
			<meta name="distribution" content="global">
			<meta http-equiv="cache-control" content="no-cache">
			<meta http-equiv="pragma" content="no-cache">

                        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png?v=1">
                        <link rel="icon" href="favicon.svg">
                        <link rel="icon" type="image/svg+xml" href="/favicon-32x32.svg?v=2" sizes="32x32">
                        <link rel="icon" type="image/svg+xml" href="/favicon-16x16.svg?v=2" sizes="16x16">
                        <link rel="manifest" href="/manifest.json?v=1">
                        <link rel="mask-icon" href="/safari-pinned-tab.svg?v=1" color="#5bbad5">
                        <meta name="apple-mobile-web-app-title" content="Z-Library">
                        <meta name="application-name" content="Z-Library">
                        <meta name="theme-color" content="#ffffff">

                        <meta name="propeller" content="49c350d528ba144cace841cac74260ab">
                        <meta name="alfacoins-site-verification" content="5ef0e7b2483f15ef0e7b2484275ef0e7b24845d_ALFAcoins">
	
<!-- CSS SET -->
<!-- JS SET --> 
<link REL="SHORTCUT ICON" HREF="/favicon.ico?v=1">
        <link rel="search" type="application/opensearchdescription+xml" href="/search.xml" title="Search for books in the library Z-Library" />

                    <link rel="stylesheet" type="text/css" href="/resources/build/global.css?0.454" />
            <script type="text/javascript" src="/resources/build/global.js?0.454"></script>
        <link rel="stylesheet" type="text/css" href="/resources/ext/bootstrap-tagsinput/bootstrap-tagsinput.css?0.454" />
<link rel="stylesheet" type="text/css" href="/resources/ext/lightbox/jquery.lightbox-0.5.css?0.454" />
<link rel="stylesheet" type="text/css" href="/resources/ext/select2/select2.min.css?0.454" />
<link rel="stylesheet" type="text/css" href="/resources/ext/flickity/flickity.css?0.454" />
<link rel="stylesheet" type="text/css" href="/resources/css/components/z-booklists-carousel.css?0.454" />
<link rel="stylesheet" type="text/css" href="/resources/css/pages/book-details.css?0.454" />
<script type="text/javascript" src="/resources/ext/typeahead.js?0.454"></script>
<script type="text/javascript" src="/resources/ext/bootstrap-tagsinput/bootstrap-tagsinput.min.js?0.454"></script>
<script type="text/javascript" src="/resources/ext/lightbox/jquery.lightbox-0.5.min.js?0.454"></script>
<script type="text/javascript" src="/resources/ext/select2/select2.min.js?0.454"></script>
<script type="text/javascript" src="/resources/ext/flickity/flickity.min.js?0.454"></script>
<script type="text/javascript" src="/resources/js/components/z-booklists-carousel.js?0.454"></script>
<script type="text/javascript" src="/resources/js/custom_elements/z-readlist-card.js?0.454"></script>
<script type="text/javascript" src="/resources/js/pages/book-details.js?0.454"></script>

        
        <script>
            
            const Config = {"domainHost":"b-ok.asia","BRegion":"asia","Country":"IN"};
            const CurrentUser = new User(null);
            const CurrentClientIP = "103.161.98.54";
            const proxiesToCheck = []; //for google verification
            const CurrentSiteMode = 'books';

            i18next
                .use(i18nextHttpBackend)
                .init({
                    lng: 'en',
                    fallbackLng: 'en',
                    backend: {
                        loadPath: '/resources/build/locales/{{lng}}?v=4'
                    }
                })

            $(document).ready(function() {
                $('.tooltip-init').tooltip({html: true})

                            })

            $(document).on('focus', '.form-email-field', function() {
                $(this).tooltip('hide')
            })

            $(document).on('change', '.form-email-field', function() {
                const $input = $(this)
                const email = $input.val()

                $input.parents('.form-group').find('.form-error').remove()
                $.each(["appzily.com","robhung.com","shackvine.com","robhung.com,","spruzme.com"], function(key, domain) {
                    if (email.indexOf(domain) !== -1) {
                        $input.tooltip({
                            placement: 'top',
                            trigger: 'manual',
                            title: $input.data('message'),
                        }).tooltip('show')
                    }
                })
            })

            $(document).on('focus', '.form-email-field', function() {
                $(this).tooltip('hide')
            })
        </script>
    </head>

    <body style="margin:0px;padding:0px;" class="books/details">
        <table class="super-puper-main-container" border="0" cellpadding="0" cellspacing="0">
            <tbody>
                <tr style="height:10px;">
                    <td style="vertical-align: top;">
                        <div class="container-fluid">
                            

<div class="row">
    <div class="col-md-12">
        
<style>
    div#colorBoxes
    {
        text-transform: capitalize;
    }

    div#colorBoxes ul li.active:nth-child(1)
    {
        border: 1px solid #378096;
        box-shadow: 0 0 6px #7DBCCF;
        border-top: 0px;
    }

    div#colorBoxes ul li.active:nth-child(2)
    {
        border: 1px solid #6e9b41;
        box-shadow: 0 0 6px #a4e861;
        border-top: 0px;
    }
</style>


<div id="colorBoxes" class="darkShadow">
    <ul>
        <li style="background: #49afd0;" class="">
            <a href="/" class="header-main-nav-link " data-mode="books">
                <span class="hidden-xs">10,870,978 books</span>
                <span class="visible-xs">books</span>
            </a>
        </li>

        <li style="background: #8ecd51;">
            <a href="https://booksc.org/" class="header-main-nav-link populate-preferred-domain" data-mode="articles">
                <span class="hidden-xs">84,837,646 articles</span>
                <span class="visible-xs">articles</span>
            </a>
        </li>

        <li style="background: #90a5a8;" class="hidden-xs"><a href="https://z-lib.org/" class="populate-preferred-domain" data-mode="home">ZLibrary Home</a></li>
        <li style="background: #90a5a8;" class="visible-xs"><a href="https://z-lib.org/" class="populate-preferred-domain" data-mode="home">Home</a></li>
    </ul>
</div>


        <div role="navigation" class="navbar-default navbar-right" style="background-color: transparent;">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false" onclick="">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
            </div>

            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1" style="clear: both;">
                <ul class="nav navbar-nav navbar-right">
                                                                <li class="dropdown">
                            <a href="#" id="loginDDLink" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Sign In <span class="caret"></span></a>
                            <ul class="dropdown-menu" aria-labelledby="loginDDLink">
                                <li><a class="populate-preferred-domain" data-mode="singlelogin" data-action="login" id="dropdownMenuLoginBtn" href="https://singlelogin.app?from=b-ok.asia%252Fbook%252F2885365%252F379e5a%252F%253FwrongHash">Login</a></li>
                                <li><a class="populate-preferred-domain" data-mode="singlelogin" data-action="registration" id="dropdownMenuRegistrationBtn" href="https://singlelogin.app/registration.php">Registration</a></li>
                            </ul>
                        </li>
                    
                    <li>
                    <a href="/howtodonate.php" style="color:#8EB46A;">Donate</a>                    </li>

                    
                    <!-- Admin menu dropdown -->
                    
                    <!-- Moderators menu dropdown -->
                    
                    <!-- Auth user menu dropdown -->
                    
                    <!-- Search menu dropdown -->
                    <li class="dropdown"  id="quickSearchMenuDD">
                        <a href="#" id="quickSearchMenuDD2" class="dropdown-toggle hidden-xs main-menu-item" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                            <img src="/img/icon-magnifier.svg" style="width: 18px;">
                        </a>
                        <ul class="dropdown-menu" style="padding: 0; border-top-left-radius: 4px;box-shadow: 1px 1px 4px rgba(0, 0, 0, 0.1); border: 1px solid rgba(0, 0, 0, .1);">
                            <li>
                                <form method="get" action="/s/" style="padding:20px;" name="quickSearch">
                                    <input id="quickSearchInput" class="form-control" type="text" name="q" placeholder="Search for title, author, ISBN, publisher, md5..">
                                    <button type="reset" class="button-search-reset" id="quickSearchReset">&times;</button>
                                    <button type="submit" style="display: none;"></button>
                                </form>
                            </li>
                        </ul>
                    </li>
                    <script>
                        $("#quickSearchMenuDD").on('shown.bs.dropdown', function(e){
                            if(window.outerWidth > 768){
                                $('#quickSearchInput').focus();
                            }
                        });
                    </script>

                    <!-- Site menu dropdown -->
                    <li class="dropdown">
                        <a href="#" id="main-menu-dropdown" class="dropdown-toggle hidden-xs main-menu-item" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="true">
                            <img src="/img/icon-main-menu.svg" style="width: 18px;">
                                                    </a>
                        <ul class="dropdown-menu topmenu">
                                                            <li><a href="/book-add.php"><span class="zlibicon-upload"></span> Add Book</a></li>
                                <li><a href="/request.php"><span class="zlibicon-request"></span> Book Requests</a></li>
                                <li><a href="/booklists"><span class="zlibicon-booklist"></span> Booklists</a></li>
                                <li><a href="/category-list"><span class="zlibicon-categories"></span> Categories</a></li>
                                <li><a href="/popular.php"><span class="zlibicon-popular"></span> Most Popular</a></li>
                                                                                                                <li><a href="/recently.php"><span class="zlibicon-recently"></span> Recently Added</a></li>
                                                        <li role="separator" class="divider"></li>
                            <li><a href="/top-zlibrarians.php"><span class="zlibicon-top"></span> Top Z-Librarians</a></li>
                            <li><a href="/blog/"><span class="zlibicon-blog"></span> Blog</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>


<style type="text/css">
    .main-menu-item img {
        opacity: 0.7;
    }
    .main-menu-item img:hover {
        opacity: 1;
    }
</style>



<script>
    $(document).ready(function() {
                    const booksDomains = ["b-ok.asia","b-ok.as","b-ok.global","3lib.net","1lib.limited","1lib.education","bookshome.net","zlibrary.org","libsolutions.net","1lib.net","bookshome.org","1lib.to"];
            const articlesDomains = ["booksc.org","booksc.xyz","art1lib.org","art1lib.com","booksc.me"];
            const Checker = DomainsChecker
        
        let stageSubdomain = '';
        let subdomainPrefix = '';
        const singleloginDomains = ["singlelogin.app","singlelogin.me","libsolutions.app","bookshome.info"];
        const redirectorDomains = ["1lib.domains","libsolutions.domains","bookshome.world","booklist.is"];

        const domainCheckSuccess = (domain, mode) => {
            if (subdomainPrefix.length && domain[2] === '.') { // priority for subdomainPrefix
                domain = domain.substr(3)
            }

            
            $('.populate-preferred-domain[data-mode="' + mode + '"]').each(function() {
                const uriPath = $(this).attr('href').replace(/^.*\/\/[^\/|\?]+/, '')
                $(this).attr('href', '//' + stageSubdomain + subdomainPrefix + domain + uriPath)
            })
        }

        const domainCheckError = (domain, mode) => {}

        Checker(booksDomains, domainCheckSuccess, domainCheckError, 'books')
        Checker(articlesDomains, domainCheckSuccess, domainCheckError, 'articles')
        DomainsChecker(singleloginDomains, domainCheckSuccess, domainCheckError, 'singlelogin')
        DomainsChecker(redirectorDomains, domainCheckSuccess, domainCheckError, 'redirector')
    })
</script>

<script>
    $("#bs-example-navbar-collapse-1").on('shown.bs.collapse', function(e){
        $('#main-menu-dropdown').dropdown('toggle');
        $('#main-menu-dropdown').attr('data-toggle', ''); // make it static

        $('#admin-menu-dropdown').dropdown('toggle');
        $('#admin-menu-dropdown').attr('data-toggle', ''); // make it static

        $("#quickSearchMenuDD2").dropdown('toggle');
        $('#quickSearchMenuDD2').attr('data-toggle', ''); // make it static

        $("#profileMenu").dropdown('toggle');
        $('#profileMenu').attr('data-toggle', ''); // make it static
    });

    $('document').ready(() => clearSearchButtonEvents('#quickSearchInput', '#quickSearchReset'));                       // быстрый поиск из шапки
</script>                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="g-page-content">
                        <div class="container" style="max-width: 1000px;padding-bottom: 40px;">
                            <div class="row">
                                <div class="col-md-12 itemFullText">
                                    
<style>
    .adFixW iframe{
        width:100%;
    }
</style>

<div class="bcNav">
    <a href="/" title="Ebook library b-ok.asia">Main</a> <i></i>
        Learning Web Development with React and Bootstrap</div>

<div class="cBox1">Something went wrong. Reload the page and try again</div>
<div itemscope itemtype="http://schema.org/Book">
    <div class="row cardBooks" data-spelling-suggest="true" data-book_id="2885365" style="overflow: hidden;">
        <div class="col-sm-3 details-book-cover-container">
            <div class="details-book-cover-content">
                            <a style="padding: 0; text-decoration: none;" href="https://covers.zlibcdn2.com/covers/books/6e/1f/2b/6e1f2b383bb2e9f9a11b5b5aa4fbaab1.jpg" class="lightbox details-book-cover checkBookDownloaded"  data-book_id="2885365" data-isbn="9781786462497,1786462494" itemprop="image">
                    <div class="z-book-cover">
                        <img src="https://covers.zlibcdn2.com/covers299/books/6e/1f/2b/6e1f2b383bb2e9f9a11b5b5aa4fbaab1.jpg" alt="Book cover Learning Web Development with React and Bootstrap" />
                    </div>
                </a>
                                        </div>
        </div>

        <div class="col-sm-9">
            <h1 itemprop="name" style="color: #000; line-height: 140%;">
                Learning Web Development with React and Bootstrap            </h1>

            <i><a  itemprop="author" class="color1" title="Find all the author's books" href="/author/Harmeet Singh">Harmeet Singh</a>, <a  itemprop="author" class="color1" title="Find all the author's books" href="/author/Mehul Bhatt">Mehul Bhatt</a></i>

                            <div class="book-rating-detail">
                    <div class="book-rating ">
                        <span class="book-rating-interest-score ">
                            5.0                        </span> /
                        <span class="book-rating-quality-score ">
                            5.0                        </span>
                    </div>
                    <div class="book-comments-here"></div>
                    <div class="bookmarks" style="display: none" data-book_id="2885365">
                        <i class="icon-heart btn-save-for-later" title="Mark the book you like best or plan to download later"></i>
                        <i class="icon-bookmark btn-booklists" title="Add the book to your personal themed book collection and share it with your community"></i>
                    </div>
                </div>

            
            <div class="book-choice-rating" data-visible="0" data-init="0">
                <div class="overlay-post-score"><div id="bookChoiceRatingtFloatingSpinner"></div></div>
                <div class="overlay"><div id="bookChoiceRatingSpinner"></div></div>
                <div class="book-choice-interest-title">How much do you like this book?</div>
                <div class="book-choice-interest-stars stars-list cursor-pointer" data-disabled="0" data-id="2885365" data-type="interest">
                    <i class="book-rating-star"></i>
                    <i class="book-rating-star"></i>
                    <i class="book-rating-star"></i>
                    <i class="book-rating-star"></i>
                    <i class="book-rating-star"></i>
                </div>

                <div class="book-choice-quality-stub">
                    <div class="book-choice-quality-title">What’s the quality of the file?</div>
                    <div class="book-choice-quality-dmsg">Download the book for quality assessment</div>
                </div>

                <div class="book-choice-quality-title">
                    <div>What’s the quality of the downloaded files?</div>
                </div>
                <div class="book-quality-rating-template">
                    <div class="book-format-quality-rating">
                        <div class="format-info">
                            <span class="download-date"></span>
                            <span class="extension"></span>
                            <span class="size"></span>
                        </div>
                        <div class="book-choice-quality-stars stars-list cursor-pointer" data-disabled="0" data-id="" data-type="quality">
                            <i class="book-rating-star"></i>
                            <i class="book-rating-star"></i>
                            <i class="book-rating-star"></i>
                            <i class="book-rating-star"></i>
                            <i class="book-rating-star"></i>
                        </div>
                    </div>
                </div>
            </div>

                            <div style="padding:10px 0; font-size:10pt" id="bookDescriptionBox"  itemprop="reviewBody">
                    <p><b>Build real-time responsive web apps using React and Bootstrap</b></p><br />
About This Book<br />
<ul><li>Showcase the power of React-Bootstrap through real-world examples</li><br />
<li>Explore the benefits of integrating React with various frameworks and APIs</li><br />
<li>See the benefits of using the latest frameworks to make your web development experience enchanting</li></ul><br />
Who This Book Is For<br />
<p>This book is for anybody who is interested in modern web development and has intermediate knowledge of HTML, CSS, and JavaScript. Basic knowledge of any JavaScript MVC framework would also be helpful.</p><br />
What You Will Learn<br />
<ul><li>See how to integrate Bootstrap with React</li><li>Explore the Redux architecture and understand its benefits</li><br />
<li>Build a custom responsive theme with React-Bootstrap components</li><br />
<li>Easily interact with DOM on your web browser</li><br />
<li>Appreciate the advantages of using JSX</li><br />
<li>Get acquainted with the various routing methods in React</li><br />
<li>Integrate external APIs into React</li></ul><br />
In Detail<br />
<p>Bootstrap is one of the most popular front-end frameworks, and integrating it with React allows web developers to write much cleaner code. This book will help you gain a thorough understanding of the Bootstrap framework and show you how to build impressive web apps.</p><br />
<p>In this book, you will get an overview of the features of Bootstrap and ReactJS, along with the integration of React-Bootstrap components with ReactJS. You will understand the benefits of using JSX and the Redux architecture. The server-side rendering of React will also be shown. All the concepts are explained by developing real-world examples.</p><br />
<p>By the end of this book, you will be equipped to create responsive web applications using Bootstrap style and React-Bootstrap components with ReactJS, and will have an insight into the best practices.</p><br />
Style and approach<br />
<p>The mission is to help you make a live and fully-responsive web application using React-Bootstrap with hands-on examples and step-by-step instructions. This book is linear as well as progressive, so every chapter builds upon the knowledge gained in the last.</p>                </div>
            
            <div style="overflow: hidden; zoom: 1; margin-top: 30px;">
                <div class="bookDetailsBox">
                <div  class="bookProperty property_categories">
                    <div class="property_label">Categories:</div>
            <div class="property_value "><a href="/category/186/Computers-Web-Development">Computers - Web Development</a></div></div>
                <div  class="bookProperty property_year">
                    <div class="property_label">Year:</div>
            <div class="property_value ">2017</div></div>
                <div  class="bookProperty property_publisher">
                    <div class="property_label">Publisher:</div>
            <div class="property_value ">Packt Publishing</div></div>
                <div  class="bookProperty property_language">
                    <div class="property_label">Language:</div>
            <div class="property_value text-capitalize">english</div></div>
                <div  class="bookProperty property_pages">
                    <div class="property_label">Pages:</div>
            <div class="property_value "><span title="Pages paperback">278</span> / <span title="Pages in file">249</span></div></div>
                <div  class="bookProperty property_isbn 10">
                    <div class="property_label">ISBN 10:</div>
            <div class="property_value ">1786462494</div></div>
                <div  class="bookProperty property_isbn 13">
                    <div class="property_label">ISBN 13:</div>
            <div class="property_value ">9781786462497</div></div>
                <div  class="bookProperty property__file">
                    <div class="property_label">File:</div>
            <div class="property_value ">PDF, 9.89 MB</div></div>
                <div style="display: none;" class="bookProperty property_user_tags">
                    <div class="property_label">Your tags:</div>
            <div class="property_value "></div></div></div>            </div>
        </div>
    </div>

    <div style="margin-top: 30px; margin-bottom: 15px;">
        <div class="details-buttons-container pull-left">
            <div class="book-details-button">
                
                <div class="btn-group">
                
            <a class="btn btn-primary dlButton addDownloadedBook" href="/dl/2885365/c5a13d" target="" data-book_id="2885365" data-isbn="9781786462497" rel="nofollow">
                <i class="zlibicon-download"></i>
                Download (pdf, 9.89 MB)
            </a>
        
                    <button id="btnCheckOtherFormats"
                        type="button"
                        data-toggle="dropdown"
                        class="btn btn-primary dropdown-toggle dlDropdownBtn"
                        data-check-formats="0"
                        data-convertation-available="1"
                    >
                        <span class="caret"></span>
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <ul class="dropdown-menu">
                        
                <li><a href="/dl/2885365/c5a13d?openInBrowser" target="_blank">Open in Browser</a></li>
            
                        <li role="separator" class="divider"></li>
                        <li id="bookOtherFormatsContainer">
                            <span class="dropdown-menu-muted" style="padding: 5px 19px 0; white-space: nowrap;">
                                Checking other formats...
                                <span id="bookOtherFormatsSpinnerContainer"></span>
                            </span>
                        </li>
                        
                    </ul>
                </div>            </div>

                        <div class="book-details-button"><a class="btn btn-default" href="ireader/2885365" target="_blank" rel="nofollow">Preview</a></div>
                        <div class="book-details-button">
                <div class="btn-group" id="sendToEmailButtonBox">
                    <button type="button" class="btn btn-default dropdown-toggle button-send-book" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Send-to-Kindle <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu">
                                            </ul>
                </div>
            </div>
            <div class="book-details-button">
                <div class="btn-group" id="shareToButtonBox">
                    <button type="button" class="btn btn-default dropdown-toggle button-send-book" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Send to <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu">
                                            </ul>
                </div>
            </div>
            
            
                    </div>
                <div style="clear: both;"></div>
    </div>

            <div id="z-slot-moderation">
            
        </div>
        <div id="z-slot-book-issue-feedback">
        
    
    <div class="z-moderation-block" data-book_id="2885365" data-active="active">
        <span class="z-moderation-block__close-button">
            <i class="zlibicon-cross"></i>
        </span>
        <div class="main_envelop">
            <div class="main-content">
                <div class="z-step z-step-start">
                    <span class="z-moderation-block__header">Report a problem</span>
                                        <div class="z-step-start__viewport-envelop">
                        <div class="z-step-start__active-part">
                            <form id="questionsForm" class="questions-form">
                                <div class="questions_container">
                                    <div class="questions-table">
                                                                                    <div class="questions-table__question" data-name="opens">
                                                <div class="question__label-envelop">
                                                    <span class="question__label">File opens</span>
                                                </div>
                                                <div class="question__controls">
                                                                                                            <div class="question__control_envelop">
                                                            <input disabled type="radio" name="opens" value="yes">
                                                            <div class="question__control question__control__good">
                                                                <i class="zlibicon-check"></i>
                                                                <span>Yes</span>
                                                            </div>
                                                        </div>
                                                        <div class="question__control_envelop">
                                                            <input disabled type="radio" name="opens" value="no">
                                                            <div class="question__control question__control__bad" data-decline_reason="ill-formed_file">
                                                                <i class="zlibicon-not-allowed"></i>
                                                                <span>No</span>
                                                            </div>
                                                        </div>
                                                                                                    </div>
                                            </div>
                                                                                    <div class="questions-table__question" data-name="is_book">
                                                <div class="question__label-envelop">
                                                    <span class="question__label">This is a book</span>
                                                </div>
                                                <div class="question__controls">
                                                                                                            <div class="question__control_envelop">
                                                            <input disabled type="radio" name="is_book" value="yes">
                                                            <div class="question__control question__control__good">
                                                                <i class="zlibicon-check"></i>
                                                                <span>Yes</span>
                                                            </div>
                                                        </div>
                                                        <div class="question__control_envelop">
                                                            <input disabled type="radio" name="is_book" value="no">
                                                            <div class="question__control question__control__bad" data-decline_reason="spam">
                                                                <i class="zlibicon-not-allowed"></i>
                                                                <span>No</span>
                                                            </div>
                                                        </div>
                                                                                                    </div>
                                            </div>
                                                                                    <div class="questions-table__question" data-name="appropriate_content">
                                                <div class="question__label-envelop">
                                                    <span class="question__label">Content is appropriate</span>
                                                </div>
                                                <div class="question__controls">
                                                                                                            <div class="question__control_envelop">
                                                            <input disabled type="radio" name="appropriate_content" value="yes">
                                                            <div class="question__control question__control__good">
                                                                <i class="zlibicon-check"></i>
                                                                <span>Yes</span>
                                                            </div>
                                                        </div>
                                                        <div class="question__control_envelop">
                                                            <input disabled type="radio" name="appropriate_content" value="no">
                                                            <div class="question__control question__control__bad" data-decline_reason="inappropriate_content">
                                                                <i class="zlibicon-not-allowed"></i>
                                                                <span>No</span>
                                                            </div>
                                                        </div>
                                                                                                    </div>
                                            </div>
                                                                                    <div class="questions-table__question" data-name="description_matches">
                                                <div class="question__label-envelop">
                                                    <span class="question__label">Description matches</span>
                                                </div>
                                                <div class="question__controls">
                                                                                                            <div class="question__control_envelop">
                                                            <input disabled type="radio" name="description_matches" value="yes">
                                                            <div class="question__control question__control__good">
                                                                <i class="zlibicon-check"></i>
                                                                <span>Yes</span>
                                                            </div>
                                                        </div>
                                                        <div class="question__control_envelop">
                                                            <input disabled type="radio" name="description_matches" value="no">
                                                            <div class="question__control question__control__bad" data-decline_reason="description_mismatch">
                                                                <i class="zlibicon-not-allowed"></i>
                                                                <span>No</span>
                                                            </div>
                                                        </div>
                                                                                                    </div>
                                            </div>
                                                                            </div>
                                    <div class="moderation-comment-block moderation-comment-block_purpose_questions">
                                        <div class="comment-block__header">
                                            <i class="zlibicon-warning comment-block__warning"></i>
                                            <span><b>Are you sure</b> the file is of bad quality?<br>Report about it</span>
                                        </div>
                                        <div class="comment-block__input-widget">
                                            <textarea class="comment-block__textarea" name="comment" rows="4" placeholder="Your comment in English"></textarea>
                                            <div class="send-button-envelop send-button-envelop_position_embedded">
                                                <button id="commentSend" type="submit" aria-description="Send a report"><i class="zlibicon-triangle-arrow-right"></i></button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                            <div class="questions_slider" data-not_resettable>
                                <svg width="7" class="questions_pointer_triangle" height="12" viewBox="0 0 7 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M6.5 12C6.5 11.7058 6.37049 11.4266 6.14594 11.2366L0.902184 6.7634C0.430107 6.3639 0.430108 5.6361 0.902184 5.2366L6.14594 0.7634 C6.37049 0.5734 6.5 0.2942 6.5 0" stroke="#D9D9D9"/>
                                </svg>
                            </div>
                            <div class="moderation-help-section" data-not_resettable>
                                                                    <div class="moderation-help-box moderation-help-box--yes">
                                                                                <span class="moderation-help-box__title">
                                            <i class="zlibicon-check"></i>
                                                <span class="moderation-help-label" data-question="opens">
        Check Yes if
    </span>    <span class="moderation-help-label" data-question="is_book">
        Check Yes if
    </span>    <span class="moderation-help-label" data-question="appropriate_content">
        Check Yes if
    </span>    <span class="moderation-help-label" data-question="description_matches">
        Check Yes if
    </span>                                        </span>
                                                                                                                                    <div class="moderation-help-hint" data-question="opens">
                                                    <span class="hint-item">
                                                        <span>you were able to open the file</span>
                                                                                                            </span>
                                                </div>
                                                                                                                                                                                <div class="moderation-help-hint" data-question="is_book">
                                                    <span class="hint-item">
                                                        <span>the file contains a book (comics are also acceptable)</span>
                                                                                                            </span>
                                                </div>
                                                                                                                                                                                <div class="moderation-help-hint" data-question="appropriate_content">
                                                    <span class="hint-item">
                                                        <span>the content of the book is acceptable</span>
                                                                                                            </span>
                                                </div>
                                                                                                                                                                                <div class="moderation-help-hint" data-question="description_matches">
                                                    <span class="hint-item">
                                                        <span>Title, Author and Language of the file match the book description. Ignore other fields as they are secondary!</span>
                                                                                                            </span>
                                                </div>
                                                                                                                        </div>
                                                                    <div class="moderation-help-box moderation-help-box--no">
                                                                                <span class="moderation-help-box__title">
                                            <i class="zlibicon-not-allowed"></i>
                                                <span class="moderation-help-label" data-question="opens">
        Check No if
    </span>    <span class="moderation-help-label" data-question="is_book">
        Check No if
    </span>    <span class="moderation-help-label" data-question="appropriate_content">
        Check No if
    </span>    <span class="moderation-help-label" data-question="description_matches">
        Check No if
    </span>                                        </span>
                                                                                                                                    <ul class="moderation-help-hint" data-question="opens">
                                                                                                            <li class="hint-item">
                                                            <span>the file is damaged</span>
                                                                                                                    </li>
                                                                                                            <li class="hint-item">
                                                            <span>the file is DRM protected</span>
                                                                                                                    </li>
                                                                                                            <li class="hint-item">
                                                            <span>the file is not a book (e.g. executable, xls, html, xml)</span>
                                                                                                                    </li>
                                                                                                    </ul>
                                                                                                                                                                                <ul class="moderation-help-hint" data-question="is_book">
                                                                                                            <li class="hint-item">
                                                            <span>the file is an article</span>
                                                                                                                    </li>
                                                                                                            <li class="hint-item">
                                                            <span>the file is a book excerpt</span>
                                                                                                                    </li>
                                                                                                            <li class="hint-item">
                                                            <span>the file is a magazine</span>
                                                                                                                    </li>
                                                                                                            <li class="hint-item">
                                                            <span>the file is a test blank</span>
                                                                                                                    </li>
                                                                                                            <li class="hint-item">
                                                            <span>the file is a spam</span>
                                                                                                                    </li>
                                                                                                    </ul>
                                                                                                                                                                                <div class="moderation-help-hint" data-question="appropriate_content">
                                                    <span class="hint-item">
                                                        <span>you believe the content of the book is unacceptable and should be blocked</span>
                                                                                                            </span>
                                                </div>
                                                                                                                                                                                <div class="moderation-help-hint" data-question="description_matches">
                                                    <span class="hint-item">
                                                        <span>Title, Author or Language of the file do not match the book description. Ignore other fields.</span>
                                                                                                            </span>
                                                </div>
                                                                                                                        </div>
                                                            </div>
                        </div>
                                                    <span class="other-reason-hint">
                                This book has a different problem?                                <a id="otherReportReason" href="javascript://">Report it to us</a>
                            </span>
                            <div class="moderation-comment-block moderation-comment-block_purpose_general">
                                <div class="comment-block__header">
                                    <i class="zlibicon-warning comment-block__warning"></i>
                                    <span><b>Are you sure</b> the file is of bad quality? Report about it</span>
                                </div>
                                <div class="comment-block__input-widget">
                                    <textarea class="comment-block__textarea" name="comment" rows="4" placeholder="Your comment in English"></textarea>
                                </div>
                                <div class="comment-block__separated-content">
                                    <div class="send-button-envelop send-button-envelop_position_separate">
                                        <button id="commentSend" type="submit">Send a report</button>
                                    </div>
                                </div>
                            </div>
                                            </div>
                </div>
                <div class="z-step z-step-end">
                    <span id="goBack"><i class="zlibicon-go-back"></i><span>Change your answer</span></span>
                    <div class="message-block">
                        <img class="circle" src="/img/mascots/4.svg" alt="">
                        <span class="main-message">
                           Thanks for your participation!<br>Together we will make our library even better                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>

    <div class="cBox1" id="sentToEmailInfo" style="display:none;">
        The file will be sent to your email address. It may take up to 1-5 minutes before you receive it.    </div>

    <div class="cBox1" id="sentToEmailInfoKindle" style="display:none;">
        The file will be sent to your Kindle account. It may takes up to 1-5 minutes before you received it.        <br><br>

        <b>Please note</b>: you need to verify every book you want to send to your Kindle. Check your mailbox for the verification email from Amazon Kindle.    </div>

    <div class="cBox1" id="sendToGoogleDriveMessage" style="display:none; position: relative;"></div>

    
    <div id="converterCurrentStatusesBoxContainer">
        <div id="converterCurrentStatusesBox">
                    </div>
    </div>
    <div id="convertationStatusTemplates">
        <div class="status-new" data-job_id=""><div class="spinner-content"></div><div class="message">Conversion to <b class="text-uppercase extension"></b> is in progress</div></div>        <div class="status-error"><span class="zlibicon-close-circle status-icon"></span><div class="message">Conversion to <b class="text-uppercase"></b> is failed</div><span class="zlibicon-cross icon-hovered delete-btn" data-job_id=""></span></div>    </div>
    <div id="shareToTooltipsContainer"></div>
</div>

<style>
    .tooltip-inner {
        max-width: 220px;
    }
</style>
<script type="text/javascript">
    const availableTags = [];
    const CurrentBook = new Book({"id":"2885365","title":"Learning Web Development with React and Bootstrap","termsHash":"584b1e84dab0015657b53d03f5333428"})
    const CurrentBookRating = new BookRating(CurrentUser)
    const $tagsInput = $('#inputTags')
    const tags = $tagsInput.length ? new TagsInput($tagsInput, CurrentUser, CurrentBook.id, availableTags) : null

    
    $(function () {

        $('#btnCheckOtherFormats').click(function() {
            if (CurrentBook.otherFormatsLoaded) {
                return
            }
            // set an event listener after other formats loading
            CurrentBook.checkOtherFormats().then(() => $(".btn-group li a.addDownloadedBook").on('click', () => {
                if (!showAddCategoryTooltip) return
                addCatLink.tooltip('show')
            }))
            CurrentBook.otherFormatsLoaded = true
        })

        if ($('#btnCheckOtherFormats').data('check-formats') == 1) {
            const spinner = new ZLibrarySpinner('btnCheckOtherFormats').length(3).radius(2).width(2).start()
            CurrentBook.checkOtherFormats().then(() => {
                spinner.stop()
                // set an event listener after other formats loading
                $(".btn-group li a.addDownloadedBook").on('click', () => {
                    if (!showAddCategoryTooltip) return
                    addCatLink.tooltip('show')
                })
            })
            CurrentBook.otherFormatsLoaded = true
        }

        $('a.lightbox').lightBox({
            containerResizeSpeed: 1
        });

        // read more
        var height = 300;
        if ($('.termsCloud').height() > 0)
        {
            height = height - $('.termsCloud').height();
        }

        if (height < 225) {
            height = 225; // min height
        }

        // prevent bad line-brake
        height = Math.floor(height / parseFloat($('#bookDescriptionBox').css('line-height'))) * parseFloat($('#bookDescriptionBox').css('line-height')) + 10; //10 - padding-bottom of box

        if ($('#bookDescriptionBox').height() > height)
        {
            $('#bookDescriptionBox').css('overflow', 'hidden');
            $('#bookDescriptionBox').css('height', height);
            $('<div style="text-align:center; cursor:pointer;font-size: 12px; height:25px;" class="moreBtn"><div style="display:inline-block;border-top: 1px dashed #333; width:75%; margin-top: 15px;"><span style="display:inline-block;position:relative;top:-13px;padding:0 30px; background: #F6F6F6;">click to read more</span></div></div>').insertAfter("#bookDescriptionBox");
        }

        $('.moreBtn, #bookDescriptionBox').click(function () {
            $('#bookDescriptionBox').css('height', 'auto');
            $('#bookDescriptionBox').css('overflow', 'auto');
            $('.moreBtn').remove();
        });

        $('#btnSaveBook').click(function () {
            const success = function (response) {
                $('#btnSaveBook').addClass('hidden')
                $('#btnUnsaveBook').removeClass('hidden')
                                ZLibraryNotify({url: '/users/saved_books.php'})
                    .info('This book was saved in your profile. Click here to see all favorites')
            }

            CurrentUser.saveReadLater(CurrentBook.id, success)
        })

        $('#btnUnsaveBook').click(function () {
            const success = function (response) {
                $('#btnSaveBook').removeClass('hidden')
                $('#btnUnsaveBook').addClass('hidden')
                if (typeof tags === 'object') {
                    tags.clear()
                }
            }

            CurrentUser.deleteReadLater(CurrentBook.id, success)
        });

        // book rating
        CurrentBookRating.initTooltip($('.book-rating-detail .book-rating'))
        CurrentBookRating.initChoiceContainerEvents();
        CurrentBookRating.checkExistsScoreForBook(CurrentBook.id, CurrentBook.data.termsHash, function (hasScore) {
            if (hasScore) {
                $('.book-rating-detail .book-rating').addClass('book-appreciated')
            }
        })
        $(document).on('click', '.book-rating-detail .book-rating.cursor-pointer', function () {
            if (CurrentBookRating.tooltipEl) {
                CurrentBookRating.tooltipEl.tooltip('hide')
            }
            CurrentBookRating.loadUserScores(CurrentBook.id, CurrentBook.data.termsHash);
        });

        $(document).on('click', '.book-choice-rating .stars-list', function(e) {
            if (!$(e.target).hasClass('book-rating-star') || $(this).data('disabled')) {
                return
            }

            const $that = $(this)
            const $bookRatingEl = $('.book-rating-detail .book-rating')
            const $ratingEl = $('.book-choice-rating')
            const $ratingOverlayEl = $ratingEl.find('.overlay-post-score')
            const $spinnerEl = $('#bookChoiceRatingtFloatingSpinner')

            const data = {
                'bookId': $that.data('id'),
                'type': $that.data('type'),
                'score': $that.find('.active-choice').length
            }

            if ($that.data('score') == data.score) {
                return
            }

            $spinnerEl.css({'top': '-10px'})
            $that.after($spinnerEl)

            $ratingOverlayEl.show()
            $that.data('disabled', 1)

            $that.fadeTo(100, 0, function () {
                CurrentBookRating.postScore(data, $spinnerEl, (result) => {
                    $ratingOverlayEl.hide()
                    $that.fadeTo(300, 1)
                    $that.data('disabled', 0)

                    if (!result.success) {
                        return
                    }

                    $that.data('score', data.score)
                    $that.find('.active, .active-none').removeClass('active active-none')
                    $that.find('.active-choice').addClass('active')

                    if ($that.data('id') != CurrentBook.id) {
                        return
                    }

                    if (result.avg.interest > 0) {
                        $bookRatingEl.addClass('book-appreciated')
                        $('.book-rating-interest-score')
                            .removeClass('none')
                            .text(parseFloat(result.avg.interest).toFixed(1))
                    }
                    if (result.avg.quality > 0) {
                        $bookRatingEl.addClass('book-appreciated')
                        $('.book-rating-quality-score')
                            .removeClass('none')
                            .text(parseFloat(result.avg.quality).toFixed(1))
                    }
                })
            })
        })

        // comments info
        $('.book-rating-detail .book-comments-here').replaceWith($('.book-comments-info'));
        $(document).on('click', '.book-comments-info', function() {
            let jscommentsTextarea = $("#jscommentsTextarea");
            $([document.documentElement, document.body]).animate({
                scrollTop: jscommentsTextarea.offset().top
            }, 500, function () { jscommentsTextarea.focus(); });
        });

        const moderationBlocks = {}
        const isMobile = isTouchDevice()

        if($('#z-slot-moderation .z-moderation-block').length) {
            if (!isBookDownloaded(+CurrentBook.id)) {
                $(function () {
                    let isShowBlocked = false
                    moderationBlocks['bookModeration'] = new ZModerationBlock({
                        type: isMobile
                            ? ZModerationBlock.availableTypes.touch
                            : ZModerationBlock.availableTypes.desktop,
                        isFixed: isMobile,
                        maxCommentLength: 128,
                        eventHandlers: {
                            async onOpen() {
                                if (isShowBlocked) return false
                                isShowBlocked = true // moderation block should only open once
                                if (!moderationBlocks['bookIssueFeedback'] || moderationBlocks['bookIssueFeedback'].state !== 'open') return null
                                return await moderationBlocks['bookIssueFeedback'].close()
                            }
                        },
                        containerSelector: '#z-slot-moderation',
                        initiatorSelector: '.addDownloadedBook',
                    })
                })
            } else {
                $('.z-moderation-block').data('active', '')
            }
        }

        if($('#z-slot-book-issue-feedback .z-moderation-block').length) {
            moderationBlocks['bookIssueFeedback'] = new ZModerationBlock({
                type: isMobile
                    ? ZModerationBlock.availableTypes.touch
                    : ZModerationBlock.availableTypes.desktop,
                isFixed: isMobile,
                maxCommentLength: 256,
                role: ZModerationBlock.availableRoles.bookIssueFeedback,
                eventHandlers: {
                    async onOpen() {
                        if (!moderationBlocks['bookModeration'] || moderationBlocks['bookModeration'].state !== 'open') return null

                        return await moderationBlocks['bookModeration'].close()
                    },
                    beforeSetNegativeAnswer(questionName) {
                        if (questionName !== 'description_matches') return

                        this.close()
                        showTooltipTwice = true
                        CurrentBook.suggestModal()
                        return false
                    }
                },
                containerSelector: '#z-slot-book-issue-feedback',
                initiatorSelector: '#btnOpenReportBlock',
            })
        }
    });

    // Bookmarks
    if ($('.bookmarks').length) {
        userBookmarksInstance = new UserBookmarks(CurrentUser.id)
        userBookmarksInstance.init({
            page: 'book',
            savedBookTags: []        })
    }

    //$('[data-toggle="tooltip"]').tooltip({'html': true});
    $(window).on("load", function () {
        const dibaledDownloadId = "#dbx_" + 2885365;
        $('[data-toggle="tooltip"]').tooltip({'html': true});
        $('[data-autoopen="true"]').tooltip('show');

        $('body').click(()=>{
            $(dibaledDownloadId).tooltip('hide');
        })
        $(".book-details-button").on("mouseenter", ()=>{
            $(dibaledDownloadId).tooltip('show');
        })
        $(".book-details-button").on("mouseleave", ()=>{
            $(dibaledDownloadId).tooltip('hide');
        })

        $('.btn-savebook-disabled').tooltip({
            'html': true,
            'trigger': 'manual',
        });

        $('.btn-savebook-disabled').mouseover(function () {
            $(this).tooltip('show')
        });

        $('.btn-savebook-disabled').click(function () {
            $(this).tooltip('hide')
        });
    });

    function iOSversion()
    {
        if (/iP(hone|od|ad)/.test(navigator.userAgent)) {
            const v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/)
            return [parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)]
        }

        return [];
    }

    /*
    if (iOSversion()[0] >= 13 && navigator.userAgent.match(/(iPod|iPhone|iPad)/) && navigator.userAgent.match(/AppleWebKit/)) {
        // preload hint image
        setTimeout(function() {
            new Image().src = "/img/safary-download-hint.png";
        }, 2000);

        $('.dlButton').click(function() {
            currentDomain = location.hostname.split('.').reverse()[1] + '.' + location.hostname.split('.').reverse()[0]

            document.cookie = "ios_download_tooltip=1; expires=Tue, 19 Jan 2038 03:14:07 GMT; domain=." + currentDomain + "; path=/"
            const iosNotify = $.notify('message', {
                template: '<div data-notify="container" class="col-xs-12 col-sm-3 alert" style="background: #fff; border: 1px solid #999;">' +
                    '<span data-notify="message">' +
                        '<img src="/img/safary-download-hint.png" style="width: 100%; margin-bottom: 8px;">' +
                        'Hint for Safari iOS 13 users: all your downloads are hidden under the arrow icon to the right of the browser address bar.<br>' +
                        '<div class="text-right"><a href="javascript://" id="btnIosNotifyClose" style="color: #337ab7;">Hide</a></div>' +
                    '</span>' +
                '</div>',
                offset: 0,
                delay: 4000
            })

            $('#btnIosNotifyClose').click(function() {
                document.cookie = 'ios_download_tooltip=10; expires=Tue, 19 Jan 2038 03:14:07 GMT; domain=.' + currentDomain + '; path=/'
                iosNotify.close()
            });
        })
    }
    */

    $(document).on('click', '.addDownloadedBook', function() {
        CurrentUser.addDownloadedBook($(this).data('book_id'))
    })

    $(document).on('click', '.btnMarkAsReaded', function() {
        const bookId = $(this).data('book_id');
        new ZLibraryResponse(new Request('/papi/user/count-download/' + bookId))
            .fetch()

        CurrentUser.addDownloadedBook(bookId)
    })

    let superImage2 = new Image();
    superImage2.onload = function ()
    {
        if(this.width !== 1){
            return ; //cant load correct image from wiki
        }

        try {
            if (window.localStorage !== undefined) {
                let p = new ProxyChecker();
                p.clearExcept(proxiesToCheck);
                $.each(proxiesToCheck, function (index, proxy) {
                    p.refresh(proxy);
                });
                p.syncCookies();

                // check domains
                let domains2check = ["b-ok.asia","b-ok.as","b-ok.global","3lib.net","1lib.limited","1lib.education","bookshome.net","zlibrary.org","libsolutions.net","1lib.net","bookshome.org","1lib.to"];
                let domainsChecker = new ProxyChecker();
                domainsChecker.scope = 'domains';
                domainsChecker.pathToTest = '1pixel.php?v=4126';
                domainsChecker.clearExcept(domains2check);
                $.each(domains2check, function (index, proxy) {
                    domainsChecker.refresh(proxy);
                });
                domainsChecker.syncCookies();
            }
        } catch (e) {
        }
    };
    superImage2.src = "https://upload.wikimedia.org/wikipedia/commons/c/ca/1x1.png?x1" + new Date().getTime();
</script>

<div class="books-mosaic" style="display: none">
    <h2 class="color1" style="margin-top:20px;overflow: hidden;">
        <span style="float:left;">You may be interested in</span>
        <a href="https://rec2me.com" style="float:right;font-size: 12px; color: #49afd0;line-height: 16pt;" target="_blank" title="recommender system and recommendation engine">
            Powered by Rec2Me
        </a>
    </h2>

    <div style="background: #49AFD0; height:2px; width: 100%; margin-bottom: 20px;">&nbsp;</div>

        <div id="booksMosaicBoxContainer"></div>

    <script id="booksMosaicBoxTemplate" type="text/x-handlebars-template">
        <div id="bMosaicBox">
        {{#each data.books}}
            <div class="brick pull-left" style="width:14%;">
                <a class="book-loading"  href="{{this.url}}?dsource=recommend" title="{{this.title}}">
                    <div class="z-book-none-cover medium recommended checkBookDownloaded" {{{this.coverData}}} data-book_id="{{this.id}}" data-isbn="{{this.isbn}}"></div>
                    <div class="z-book-cover checkBookDownloaded" data-book_id="{{this.id}}" data-isbn="{{this.isbn}}">
                        <img src="https://covers.zlibcdn2.com{{this.cover}}" class="bMosaicCover bgrid-item item" loading="lazy"/>
                    </div>
                </a>
            </div>
        {{/each}}
        </div>
    </script>

    <style>
        .bMosaicBox { min-height: 100vh }
        #booksMosaicBoxContainer #bMosaicBox {
            display: none;
        }
        #booksMosaicBoxContainer #bMosaicBox .brick a {
            display: block;
            text-decoration: none;
        }
        #booksMosaicBoxContainer #bMosaicBox .bMosaicCover {
            width: 100%;
        }

        .book-loading { position: relative }

        .book-loading > div:nth-child(2) {
            opacity: 0;
            position: absolute;
            top: 0;
            left: 0;
        }

        #bMosaicBox .c-book-title {
            max-height: 60px;
        }

        @keyframes toggleOpacity {
            from { opacity: 1 }
            to { opacity: 0 }
        }
    </style>

    <script type="text/javascript" src="/resources/ext/freewall.js"></script>
    <script>
        $(document).ready(function() {
            const booksMosaicBoxTemplate = Handlebars.compile(document.getElementById('booksMosaicBoxTemplate').innerHTML)
            const data = new ZLibraryModelList({"books":[{"id":"1304587","isbn":"9781118008188,1118008189","url":"\/book\/1304587\/768897","title":"HTML and CSS: Design and Build Websites","cover":"\/covers200\/books\/f2\/f2\/31\/f2f231b39e648d7db773fe8c02e87132.jpg","coverData":" data-id=\"1304587\" data-title=\"HTML and CSS: Design and Build Websites\" data-author=\"Jon Duckett\""},{"id":"2475034","isbn":"9781118531648,1118531647","url":"\/book\/2475034\/4b0c42","title":"JavaScript and JQuery: Interactive Front-End Web Development","cover":"\/covers200\/books\/26\/c3\/03\/26c303a8f1e8881a7a6bd59d57a76aef.jpg","coverData":" data-id=\"2475034\" data-title=\"JavaScript and JQuery: Interactive Front-End Web Development\" data-author=\"Jon Duckett\""},{"id":"2844187","isbn":"9781484223819,9781484223826,1484223810,1484223829","url":"\/book\/2844187\/f75ead","title":"Introducing Bootstrap 4","cover":"\/covers200\/books\/f9\/21\/3b\/f9213b4c971d10ce0d0ad36fc9f78021.jpg","coverData":" data-id=\"2844187\" data-title=\"Introducing Bootstrap 4\" data-author=\"Jorg Krause\""},{"id":"2885521","isbn":"9781491954621,1491954620","url":"\/book\/2885521\/e24cfb","title":"Learning React: Functional Web Development with React and Redux [Early Release, Raw &amp; Unedited]","cover":"\/covers200\/books\/0f\/64\/55\/0f645596d95580dbf816a038fc2018cd.jpg","coverData":" data-id=\"2885521\" data-title=\"Learning React: Functional Web Development with React and Redux [Early Release, Raw & Unedited]\" data-author=\"Alex Banks, Eve Porcello\""},{"id":"2932843","isbn":"","url":"\/book\/2932843\/63a5d5","title":"30 days of react","cover":"\/covers200\/books\/6b\/d8\/7f\/6bd87fd75465ae2f041c0b69412e3cf1.jpg","coverData":" data-id=\"2932843\" data-title=\"30 days of react\" data-author=\"fullstack react\""},{"id":"3362180","isbn":"9780991344628,0991344626","url":"\/book\/3362180\/148960","title":"Fullstack React: The Complete Guide to ReactJS and Friends","cover":"\/covers200\/books\/42\/66\/d3\/4266d31aa708d3e48fb1ea62933364f9.jpg","coverData":" data-id=\"3362180\" data-title=\"Fullstack React: The Complete Guide to ReactJS and Friends\" data-author=\"Accomazzo Anthony, Murray Nathaniel, Lerner Ari\""},{"id":"3404523","isbn":"9781785288876,1785288873","url":"\/book\/3404523\/aaf497","title":"Bootstrap By Example","cover":"\/covers200\/books\/f0\/d4\/ff\/f0d4ff820efdc957f1b24f1e07e42cdb.jpg","coverData":" data-id=\"3404523\" data-title=\"Bootstrap By Example\" data-author=\"Silvio Moreto\""},{"id":"3405023","isbn":"","url":"\/book\/3405023\/5dcf1a","title":"Bootstrap 4 \u2013 Responsive Web Design","cover":"\/covers200\/books\/61\/a9\/76\/61a976a92a5164058bc3502598a509f0.jpg","coverData":" data-id=\"3405023\" data-title=\"Bootstrap 4 \u2013 Responsive Web Design\" data-author=\"Silvio Moreto, Matt Lambert, Benjamin Jakobus, Jason Marah\""},{"id":"3428503","isbn":"9781788291644,1788291646","url":"\/book\/3428503\/7c4a96","title":"Vue.js 2 and Bootstrap 4 web development : build responsive SPAs with Bootstrap 4, Vue.js 2, and Firebase","cover":"\/covers200\/books\/7e\/55\/6b\/7e556bcdba065d692175f778abe043d8.jpg","coverData":" data-id=\"3428503\" data-title=\"Vue.js 2 and Bootstrap 4 web development : build responsive SPAs with Bootstrap 4, Vue.js 2, and Firebase\" data-author=\"Filipova, Olga\""},{"id":"3428911","isbn":"9781785889295,178588929X","url":"\/book\/3428911\/c78bbe","title":"Bootstrap 4 Cookbook","cover":"\/covers200\/books\/f0\/d4\/9d\/f0d49d41d503208c2f3a6710be7036d5.png","coverData":" data-id=\"3428911\" data-title=\"Bootstrap 4 Cookbook\" data-author=\"Ajdin Imsirovic\""},{"id":"3430494","isbn":"9781788834902,9781788290920,9781785889295,1788834909,1788290925,178588929X","url":"\/book\/3430494\/da2361","title":"Mastering Bootstrap 4","cover":"\/covers200\/books\/0a\/ac\/f7\/0aacf7f761ce5567080ccf2d1566100f.jpg","coverData":" data-id=\"3430494\" data-title=\"Mastering Bootstrap 4\" data-author=\"Benjamin Jakobus, Jason Marah\""},{"id":"3498746","isbn":"9781986338820,1986338827","url":"\/book\/3498746\/4c2627","title":"The Road to learn React: Your journey to master plain yet pragmatic React.js","cover":"\/covers200\/books\/1c\/a8\/0d\/1ca80d2ca01ac4fe106c899900e9eecb.jpg","coverData":" data-id=\"3498746\" data-title=\"The Road to learn React: Your journey to master plain yet pragmatic React.js\" data-author=\"Robin Wieruch\""},{"id":"3556226","isbn":"9781491960202,1491960205","url":"\/book\/3556226\/072a01","title":"Learning Web Design - A Beginner\u2019s Guide to HTML, CSS, JavaScript, and Web Graphics","cover":"\/covers200\/books\/2c\/ad\/8e\/2cad8eb632e7aae4d523d17731fa58d2.jpg","coverData":" data-id=\"3556226\" data-title=\"Learning Web Design - A Beginner\u2019s Guide to HTML, CSS, JavaScript, and Web Graphics\" data-author=\"Jennifer Niederst Robbins\""},{"id":"3559153","isbn":"9781617293856,1617293857","url":"\/book\/3559153\/998fe1","title":"React in Action","cover":"\/covers200\/books\/63\/89\/01\/6389013099031f513fabf8148cf47b7d.jpg","coverData":" data-id=\"3559153\" data-title=\"React in Action\" data-author=\"Mark Tielens Thomas; [Thomas, M.T.]\""},{"id":"3596488","isbn":"9781788830775,1788830776","url":"\/book\/3596488\/842caf","title":"Full-stack web development with Vue.js and Node : build scalable and powerful web apps with modern web stack, MongoDB, Vue, Node.js, and Express","cover":"\/covers200\/books\/a7\/18\/57\/a71857bd0310909e8e36eda92ab3e186.jpg","coverData":" data-id=\"3596488\" data-title=\"Full-stack web development with Vue.js and Node : build scalable and powerful web apps with modern web stack, MongoDB, Vue, Node.js, and Express\" data-author=\"Sharma, Aneeta\""},{"id":"3625108","isbn":"9781484239384,1484239385","url":"\/book\/3625108\/eccaac","title":"Practical React Native: Build Two Full Projects and One Full Game using React Native","cover":"\/covers200\/books\/86\/07\/7a\/86077adf99c199e9929f5f84c91cf5ee.jpg","coverData":" data-id=\"3625108\" data-title=\"Practical React Native: Build Two Full Projects and One Full Game using React Native\" data-author=\"Frank Zammetti\""},{"id":"3631138","isbn":"","url":"\/book\/3631138\/e90f80","title":"Full-Stack React Projects","cover":"\/covers200\/books\/eb\/1a\/ac\/eb1aac807803db1a3b0ae6a4387f98c5.jpg","coverData":" data-id=\"3631138\" data-title=\"Full-Stack React Projects\" data-author=\"Shama Hoque\""},{"id":"3647373","isbn":"9781491978917,1491978910","url":"\/book\/3647373\/730ef3","title":"Learning PHP, MySQL &amp; JavaScript - With jQuery, CSS &amp; HTML5","cover":"\/covers200\/books\/7d\/5b\/67\/7d5b67e3287c146dc546d4248dcccbdf.jpg","coverData":" data-id=\"3647373\" data-title=\"Learning PHP, MySQL & JavaScript - With jQuery, CSS & HTML5\" data-author=\"Robin Nixon\""},{"id":"3718058","isbn":"9781484244500,1484244508","url":"\/book\/3718058\/947eab","title":"Pro React 16","cover":"\/covers200\/books\/e9\/af\/27\/e9af27ad16a3297af405df554342b7f6.jpg","coverData":" data-id=\"3718058\" data-title=\"Pro React 16\" data-author=\"Adam Freeman\""},{"id":"5239991","isbn":"9781788991018,178899101X","url":"\/book\/5239991\/a15216","title":"Advanced TypeScript programming projects : build 9 different apps with TypeScript 3 and JavaScript frameworks such as Angular, React, and Vue","cover":"\/covers200\/books\/41\/2b\/75\/412b7599c0c63c063566d3f1ffd02abf.jpg","coverData":" data-id=\"5239991\" data-title=\"Advanced TypeScript programming projects : build 9 different apps with TypeScript 3 and JavaScript frameworks such as Angular, React, and Vue\" data-author=\"O\u2019Hanlon, Peter\""},{"id":"5242227","isbn":"9781484243909,9781484243916,1484243900,1484243919","url":"\/book\/5242227\/3a8764","title":"Pro MERN Stack: Full Stack Web App Development with Mongo, Express, React, and Node","cover":"\/covers200\/books\/26\/76\/2b\/26762b111a6cd82d12c0142c085167c5.jpg","coverData":" data-id=\"5242227\" data-title=\"Pro MERN Stack: Full Stack Web App Development with Mongo, Express, React, and Node\" data-author=\"Vasan Subramanian\""},{"id":"5351763","isbn":"9781492046981,1492046981,B084KMH9JP","url":"\/book\/5351763\/959436","title":"JavaScript Everywhere: Building Cross-Platform Applications with GraphQL, React, React Native, and Electron","cover":"\/covers200\/books\/3e\/8c\/3c\/3e8c3c656e1ac43106f3a77904737284.jpeg","coverData":" data-id=\"5351763\" data-title=\"JavaScript Everywhere: Building Cross-Platform Applications with GraphQL, React, React Native, and Electron\" data-author=\"Adam D. Scott\""},{"id":"5424689","isbn":"9781789954937,1789954932","url":"\/book\/5424689\/a3ca25","title":"React Projects","cover":"\/covers200\/books\/aa\/4b\/f6\/aa4bf646346b993ad4d42b873414bcee.png","coverData":" data-id=\"5424689\" data-title=\"React Projects\" data-author=\"Roy Derks\""},{"id":"5430455","isbn":"9781484257388,1484257383","url":"\/book\/5430455\/80593f","title":"Modern Full-Stack Development: Using TypeScript, React, Node.js, Webpack, and Docker","cover":"\/covers200\/books\/6e\/45\/e4\/6e45e486274523acce569f1f08a3b473.jpg","coverData":" data-id=\"5430455\" data-title=\"Modern Full-Stack Development: Using TypeScript, React, Node.js, Webpack, and Docker\" data-author=\"Frank Zammetti\""},{"id":"5517597","isbn":"9781839219795,1839219793","url":"\/book\/5517597\/84baa4","title":"Responsive Web Design with HTML5 and CSS: Develop future-proof responsive websites using the latest HTML5 and CSS techniques","cover":"\/covers200\/books\/bf\/38\/81\/bf3881984efc9b87954f91e00bdcb9a3.jpg","coverData":" data-id=\"5517597\" data-title=\"Responsive Web Design with HTML5 and CSS: Develop future-proof responsive websites using the latest HTML5 and CSS techniques\" data-author=\"Ben Frain\""},{"id":"5579443","isbn":"9781492051725,1492051721","url":"\/book\/5579443\/4214f8","title":"Learning React: Modern Patterns for Developing React Apps","cover":"\/covers200\/books\/9b\/a7\/9b\/9ba79b6bb4c19a1b9a324d052553b60b.jpg","coverData":" data-id=\"5579443\" data-title=\"Learning React: Modern Patterns for Developing React Apps\" data-author=\"Alex Banks and Eve Porcello\""},{"id":"5685813","isbn":"9781839215414,1839215410","url":"\/book\/5685813\/9e9f08","title":"Full-Stack React Projects: Learn MERN stack development by building modern web apps using MongoDB, Express, React, and Node.js, 2nd Edition","cover":"\/covers200\/books\/19\/6e\/60\/196e60b225073d4fa05ab8a6e5992ec5.jpg","coverData":" data-id=\"5685813\" data-title=\"Full-Stack React Projects: Learn MERN stack development by building modern web apps using MongoDB, Express, React, and Node.js, 2nd Edition\" data-author=\"Shama Hoque\""},{"id":"11405034","isbn":"B08S77RS23","url":"\/book\/11405034\/c60860","title":"Bootstrap Reference Guide: Web Development with Bootstrap","cover":"\/covers200\/books\/84\/7a\/da\/847ada77fced1871394ed2e98e2b5bec.jpg","coverData":" data-id=\"11405034\" data-title=\"Bootstrap Reference Guide: Web Development with Bootstrap\" data-author=\"Claudia Alves, Alexander Aronowitz\""}]}).getAll()

            // check if we have images
            if (!$.isArray(data.books) || !data.books.length) {
                return
            }

            $('#booksMosaicBoxContainer').closest('.books-mosaic').show()

            // render template
            $('#booksMosaicBoxContainer').html(booksMosaicBoxTemplate({data: data}))

            // init mosaic
            $('#bMosaicBox').css('display', 'block')
            const wall = new Freewall('#bMosaicBox')
            wall.reset({
                selector: '.brick',
                keepOrder: false,
                animate: true,
                cellW: $($('.brick')[0]).outerWidth(),
                cellH: 'auto',
                gutterX: 8,
                gutterY: 8,
                fixSize: false,
                onResize: function () {
                    wall.fitWidth()
                },
            })

            let adjustTimer
            const switchToImage = ($image, isInstant) => {
                if ($image.hasClass('loaded')) {
                    return
                }

                const imgHeight = $image.height() + 'px'
                const $bookEnvelop = $image.closest('.book-loading')

                $bookEnvelop.css('height', imgHeight)

                if (isInstant) {
                    $bookEnvelop.find('.z-book-none-cover').css('opacity', 0)
                } else {
                    $bookEnvelop.find('.z-book-none-cover')[0].style.animation = '.5s forwards toggleOpacity'
                }
                $bookEnvelop.find('.z-book-cover')[0].style.animation = '.5s reverse forwards toggleOpacity'

                $image.addClass('loaded')

                clearTimeout(adjustTimer)
                adjustTimer = setTimeout(() => wall.fitWidth(), 400)
            }

            // Should be run async, otherwise this code will delay the execution of the js code with a large number of images
            wall.container.find('img').on('load', function () {
                switchToImage($(this), false)
            })

            $('.brick img').each(function() {
                if (this.complete && this.naturalHeight !== 0) {
                    switchToImage($(this), true)
                }
            })

            // make books spines
            $('#booksMosaicBoxContainer .z-book-cover').each(function () {
                makeBookCover($(this))
            })

            $('#booksMosaicBoxContainer .z-book-none-cover').each(function () {
                makeBookWithoutCover($(this))
            })

            setTimeout(() => wall.fitWidth(), 300)
        })
    </script>
    </div>

<h2 class="color1" style="margin-top:20px;">Most frequent terms</h2>
<div style="background: #49AFD0; height:2px; width: 100%; margin-bottom: 20px;">&nbsp;</div>

<div class="termsCloud"><div class="termWrap "><a class="color1" href="/terms/?q=div" target="_blank">div</a><sup title="Frequency in the text">465</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=component" target="_blank">component</a><sup title="Frequency in the text">355</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=bootstrap" target="_blank">bootstrap</a><sup title="Frequency in the text">340</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=classname" target="_blank">classname</a><sup title="Frequency in the text">273</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=script" target="_blank">script</a><sup title="Frequency in the text">183</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=components" target="_blank">components</a><sup title="Frequency in the text">160</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=jsx" target="_blank">jsx</a><sup title="Frequency in the text">150</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=var" target="_blank">var</a><sup title="Frequency in the text">141</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=reactjs" target="_blank">reactjs</a><sup title="Frequency in the text">138</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=redux" target="_blank">redux</a><sup title="Frequency in the text">132</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=div+classname" target="_blank">div classname</a><sup title="Frequency in the text">130</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=html" target="_blank">html</a><sup title="Frequency in the text">119</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=javascript" target="_blank">javascript</a><sup title="Frequency in the text">118</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=render" target="_blank">render</a><sup title="Frequency in the text">110</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=let%27s" target="_blank">let's</a><sup title="Frequency in the text">100</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=router" target="_blank">router</a><sup title="Frequency in the text">98</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=navbar" target="_blank">navbar</a><sup title="Frequency in the text">98</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=col" target="_blank">col</a><sup title="Frequency in the text">93</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=span" target="_blank">span</a><sup title="Frequency in the text">92</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=src" target="_blank">src</a><sup title="Frequency in the text">87</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=responsive" target="_blank">responsive</a><sup title="Frequency in the text">83</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=app" target="_blank">app</a><sup title="Frequency in the text">81</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=dom" target="_blank">dom</a><sup title="Frequency in the text">78</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=preceding" target="_blank">preceding</a><sup title="Frequency in the text">71</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=div+class" target="_blank">div class</a><sup title="Frequency in the text">70</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=css" target="_blank">css</a><sup title="Frequency in the text">69</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=import" target="_blank">import</a><sup title="Frequency in the text">65</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=api" target="_blank">api</a><sup title="Frequency in the text">64</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=default" target="_blank">default</a><sup title="Frequency in the text">64</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=modal" target="_blank">modal</a><sup title="Frequency in the text">63</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=browser" target="_blank">browser</a><sup title="Frequency in the text">57</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=props" target="_blank">props</a><sup title="Frequency in the text">57</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=babel" target="_blank">babel</a><sup title="Frequency in the text">57</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=user" target="_blank">user</a><sup title="Frequency in the text">56</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=jquery" target="_blank">jquery</a><sup title="Frequency in the text">56</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=ticket" target="_blank">ticket</a><sup title="Frequency in the text">55</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=input" target="_blank">input</a><sup title="Frequency in the text">54</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=label" target="_blank">label</a><sup title="Frequency in the text">54</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=container" target="_blank">container</a><sup title="Frequency in the text">53</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=syntax" target="_blank">syntax</a><sup title="Frequency in the text">52</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=href" target="_blank">href</a><sup title="Frequency in the text">52</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=webpack" target="_blank">webpack</a><sup title="Frequency in the text">48</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=btn" target="_blank">btn</a><sup title="Frequency in the text">47</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=it%27s" target="_blank">it's</a><sup title="Frequency in the text">46</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=flux" target="_blank">flux</a><sup title="Frequency in the text">45</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=url" target="_blank">url</a><sup title="Frequency in the text">43</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=nav" target="_blank">nav</a><sup title="Frequency in the text">43</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=following+screenshot" target="_blank">following screenshot</a><sup title="Frequency in the text">42</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=tag" target="_blank">tag</a><sup title="Frequency in the text">41</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=script+type" target="_blank">script type</a><sup title="Frequency in the text">41</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=attribute" target="_blank">attribute</a><sup title="Frequency in the text">41</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=bootstrap+component" target="_blank">bootstrap component</a><sup title="Frequency in the text">41</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=redux+architecture" target="_blank">redux architecture</a><sup title="Frequency in the text">40</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=preceding+code" target="_blank">preceding code</a><sup title="Frequency in the text">39</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=bootstrap+and+react" target="_blank">bootstrap and react</a><sup title="Frequency in the text">38</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=https" target="_blank">https</a><sup title="Frequency in the text">38</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=routing" target="_blank">routing</a><sup title="Frequency in the text">37</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=email" target="_blank">email</a><sup title="Frequency in the text">36</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=responsive+theme" target="_blank">responsive theme</a><sup title="Frequency in the text">36</sup></div><div class="termWrap "><a class="color1" href="/terms/?q=const" target="_blank">const</a><sup title="Frequency in the text">35</sup></div></div><div class="related-booklists-lazy">
    <div class="related-booklists-block">
        <h2 class="color1" style="margin-top:20px;">Related Booklists</h2>
        <div style="background: #49AFD0; height:2px; width: 100%; margin-bottom: 20px;">&nbsp;</div>
        <div class="z-booklists-carousel" data-book_id="2885365" data-loader="loadBooklists" data-booklists_type="related"></div>
    </div>
</div>

<script>
    $(function() {
        zBooklistCarousel('.z-booklists-carousel', {destroyContainer: true})
    })
</script>

<div class="book-comments-info">0 comments</div>

<div style="background: #49AFD0; height:2px; width: 100%; margin:40px 0 40px 0;">&nbsp;</div>


<div id="jscommentsRootBox">
    <div class="jscommentsFormBox">
        <div style="width:65%; float:left;">
            <form id="jscommentsForm" target="uploader" action="rpc.php" method="POST">
                <input type="hidden" name="book_id" value="2885365">
                <input type="hidden" name="action" value="addReview">
                <input type="hidden" name="rx" value="0">
                <input disabled="disabled" id="jscommentsNamefield" name="name" type="textfield" placeholder="Your Name" value="" onchange="if (this.value) {
                            $(this).removeClass('error');
                        }"/>
                <textarea disabled="disabled" id="jscommentsTextarea" name="text" placeholder="Write a Review"  onchange="if (this.value) {
                            $(this).removeClass('error');}"></textarea>
                <br clear="all" />
                <button disabled="disabled" id="jscommentsButton" onclick="onReviewSubmit(); return false;" style="position: relative;">
                    Post a Review                </button>
                <span class="auth-msg">To post a review, please <a href="#" onclick="showAuthModal('login'); return false;" class="plink">sign in</a> or <a href="#" onclick="showAuthModal('registration'); return false;" class="plink">sign up</a></span>            </form>
        </div>
        <div style="width:35%; float:left;" class="jscommentsFormHelp">
            <div style="padding:10px 0 0 20px;  border-left:1px solid #ccc;">
                You can write a book review and share your experiences. Other readers will always be interested in your opinion of the books you've read. Whether you've loved the book or not, if you give your honest and detailed thoughts then people will find new books that are right for them.            </div>
        </div>
    </div>
    <div id="jscommentsCommentsBox"></div>
</div>

<style>
    #jscommentsButton:disabled {
        opacity: 0.5;
    }
    .auth-msg {
        margin:0 0 0 30px;
        color: #ED9111;
    }
    @media (max-width: 700px) {
        .auth-msg {
            display: block;
            margin: 10px 0 0 0;
        }
    }
    @media (max-width: 485px) {
        .auth-msg {
            width: 175px;
        }
    }
</style>

<script>
    $('#jscommentsForm')[0].rx.value = 12;
    const postCommentSpinner = new ZLibrarySpinner($('#jscommentsButton'));

    function showAuthModal(action) {
        new User().showAuthPopup(action)
    }

    function onReviewSubmit()
    {
        $('#jscommentsForm')[0].submit();
        $('#jscommentsButton').data('originaltxt', $('#jscommentsButton')[0].innerHTML).attr('disabled', 'disabled');
        $('#jscommentsNamefield').attr("disabled", "disabled");
        $('#jscommentsTextarea').attr("disabled", "disabled");
        postCommentSpinner.start();
    }

    function onReviewSubmitFailure()
    {
        $('#jscommentsButton').text($('#jscommentsButton').data('originaltxt')).removeAttr('disabled');
        $('#jscommentsNamefield').removeAttr("disabled");
        $('#jscommentsTextarea').removeAttr("disabled");
        postCommentSpinner.stop();
    }
</script>
<div style="display: none;">
<div id="searchResultBox"><div class="divider"></div><div class="resItemBox resItemBoxBooks exactMatch" data-spelling-suggest="true" data-book_id="2885366" itemscope itemtype="http://schema.org/Book">
    <div>
        <div class="counter">1</div>
        <table style="width:100%; height:100%;" class="resItemTable">
            <tr class="bookRow" data-book_id="2885366">
                <td class="itemCover">
                    <div class="checkBookDownloaded itemCoverWrapper" data-book_id="2885366" data-isbn="">
                        <div style="" class="z-book-precover" >
                            <a href="/book/2885366/613ea3"><img class="cover lazy" alt="" data-src="https://covers.zlibcdn2.com/covers100/books/67/f2/6f/67f26f9bff2d9709734a2ed704d0d9f3.jpg" data-srcset="https://covers.zlibcdn2.com/covers100/books/67/f2/6f/67f26f9bff2d9709734a2ed704d0d9f3.jpg 1x, https://covers.zlibcdn2.com/covers200/books/67/f2/6f/67f26f9bff2d9709734a2ed704d0d9f3.jpg 2x" /></a>
                        </div>
                    </div>
                </td>
                <td style="vertical-align: top;">
                    <table style="width:100%;height:100%;">
                        <tr>
                            <td>
                                <h3 itemprop="name">
                                    <a href="/book/2885366/613ea3" style="text-decoration: underline;">Topologie I : espaces métrisables, espaces complets</a>
                                    
                                </h3>
                                
                                <div class="authors"><a  itemprop="author" class="color1" title="Find all the author's books" href="/author/Casimir Kuratowski">Casimir Kuratowski</a></div>
                            </td>
                            
                        </tr>
                        <tr>
                            <td colspan="99" style="vertical-align: bottom;">
                                <div class="tags-container"></div>
                                
                                
                                <div class="bookDetailsBox">
                <div  class="bookProperty property_year">
                    <div class="property_label">Year:</div>
            <div class="property_value ">1948</div></div>
                <div  class="bookProperty property_language">
                    <div class="property_label">Language:</div>
            <div class="property_value text-capitalize">french</div></div>
                <div  class="bookProperty property__file">
                    <div class="property_label">File:</div>
            <div class="property_value ">DJVU, 28.61 MB</div></div>
                <div style="display: none;" class="bookProperty property_user_tags">
                    <div class="property_label">Your tags:</div>
            <div class="property_value "></div></div>
            <div class="bookProperty property_rating">
                <div class="book-rating" title="Book Rating / File Quality" data-book_id="2885366" data-terms_hash="85021cc875831889b235fbf031873997">
                    <span class="book-rating-interest-score none">
                        0
                    </span> /
                    <span class="book-rating-quality-score none">
                        0
                    </span>
                </div>
            </div></div>
                            </td>
                        </tr>
                    </table>
                </td>                
            </tr>
        </table>
    </div>
</div><div class="divider"></div><div class="resItemBox resItemBoxBooks exactMatch" data-spelling-suggest="true" data-book_id="2885364" itemscope itemtype="http://schema.org/Book">
    <div>
        <div class="counter">2</div>
        <table style="width:100%; height:100%;" class="resItemTable">
            <tr class="bookRow" data-book_id="2885364">
                <td class="itemCover">
                    <div class="checkBookDownloaded itemCoverWrapper" data-book_id="2885364" data-isbn="">
                        <div style="" class="z-book-precover" >
                            <a href="/book/2885364/d4df1e"><img class="cover lazy" alt="" data-src="https://covers.zlibcdn2.com/covers100/books/e0/89/93/e089938844cbde67634a22357854d7b8.jpg" data-srcset="https://covers.zlibcdn2.com/covers100/books/e0/89/93/e089938844cbde67634a22357854d7b8.jpg 1x, https://covers.zlibcdn2.com/covers200/books/e0/89/93/e089938844cbde67634a22357854d7b8.jpg 2x" /></a>
                        </div>
                    </div>
                </td>
                <td style="vertical-align: top;">
                    <table style="width:100%;height:100%;">
                        <tr>
                            <td>
                                <h3 itemprop="name">
                                    <a href="/book/2885364/d4df1e" style="text-decoration: underline;">Desrealización y diferencia: conceptos fundamentales de la estética de Ortega y Gasset</a>
                                    
                                </h3>
                                
                                <div class="authors"><a  itemprop="author" class="color1" title="Find all the author's books" href="/author/Gutierrez-Pozo">Gutierrez-Pozo</a>, <a  itemprop="author" class="color1" title="Find all the author's books" href="/author/Antonio">Antonio</a></div>
                            </td>
                            
                        </tr>
                        <tr>
                            <td colspan="99" style="vertical-align: bottom;">
                                <div class="tags-container"></div>
                                
                                
                                <div class="bookDetailsBox">
                <div  class="bookProperty property_year">
                    <div class="property_label">Year:</div>
            <div class="property_value ">2012</div></div>
                <div  class="bookProperty property_language">
                    <div class="property_label">Language:</div>
            <div class="property_value text-capitalize">spanish</div></div>
                <div  class="bookProperty property__file">
                    <div class="property_label">File:</div>
            <div class="property_value ">PDF, 2.02 MB</div></div>
                <div style="display: none;" class="bookProperty property_user_tags">
                    <div class="property_label">Your tags:</div>
            <div class="property_value "></div></div>
            <div class="bookProperty property_rating">
                <div class="book-rating" title="Book Rating / File Quality" data-book_id="2885364" data-terms_hash="d9f9bfb08fbb5cb99aa9a2e222b706b2">
                    <span class="book-rating-interest-score none">
                        0
                    </span> /
                    <span class="book-rating-quality-score none">
                        0
                    </span>
                </div>
            </div></div>
                            </td>
                        </tr>
                    </table>
                </td>                
            </tr>
        </table>
    </div>
</div><center></center></div>
<script>
    $(document).on('click', '.btnEditBook', function() {
        const bookId = $(this).parents('.bookRow').data('book_id')
        const CurrentBook = new Book({id: bookId})
        CurrentBook.suggestModal()
    })

    $(function () {
        $('.lazy').Lazy({
            effect: 'fadeIn',
            effectTime: 1000,
            beforeLoad: function(element) {
                $(element).css({'border-width': '0px'});
            },
            afterLoad: function(element) {
                $(element).css({'border-width': '1px'});
                $(element).closest('.z-book-precover').hide().removeClass('z-book-precover').addClass('z-book-cover covered').fadeIn(1000)
            }
        });
        
        if ($('.bookProperty.property_rating').length) {
            const bookRating = new BookRating(CurrentUser)
            $('.bookProperty.property_rating .book-rating').each(function () {
                const $that = $(this)
                bookRating.checkExistsScoreForBook($that.data('book_id'), $that.data('terms_hash'), function (result) {
                    if(result) {
                        $that.addClass('book-appreciated')
                    }
                })
            })
        }

        $('.property_18plus').tooltip({
            title: 'This is adult content. If you want to <br> view such books - click &laquo;<a href="javascript://" class="btnHide18plus">Always display</a>&raquo;<br> if not - click &laquo;<a href="/profileEdit.php#other-settings" target="_blank">Hide</a>&raquo;',
            html: true,
            trigger: 'click',
        })

        $(document).on('click', '.btnHide18plus', function() {
            new ZLibraryResponse('/eapi/user/update', {hide18plus: 0})
                .successMessage('Saved')
                .fetch()

            $('.property_18plus').tooltip('hide')
            $('.property_18plus').remove()
        })

            });
</script>

<pre>Learning Web Development
with React and Bootstrap

Build real-time responsive web apps using React and
Bootstrap

Harmeet Singh
Mehul Bhatt

BIRMINGHAM - MUMBAI

Learning Web Development with React and
Bootstrap
Copyright © 2016 Packt Publishing

All rights reserved. No part of this book may be reproduced, stored in a retrieval system, or
transmitted in any form or by any means, without the prior written permission of the
publisher, except in the case of brief quotations embedded in critical articles or reviews.
Every effort has been made in the preparation of this book to ensure the accuracy of the
information presented. However, the information contained in this book is sold without
warranty, either express or implied. Neither the authors, nor Packt Publishing, and its
dealers and distributors will be held liable for any damages caused or alleged to be caused
directly or indirectly by this book.
Packt Publishing has endeavored to provide trademark information about all of the
companies and products mentioned in this book by the appropriate use of capitals.
However, Packt Publishing cannot guarantee the accuracy of this information.
First published: December 2016
Production reference: 1151216
Published by Packt Publishing Ltd.
Livery Place
35 Livery Street
Birmingham
B3 2PB, UK.

ISBN 978-1-78646-249-7
www.packtpub.com

Credits
Authors

Copy Editor

Harmeet Singh
Mehul Bhatt

Safis Editing

Reviewer

Project Coordinator

Sandeep Neema

Devanshi Doshi

Commissioning Editor

Proofreader

Ashwin Nair

Safis Editing

Acquisition Editor

Indexer

Nitin Dasan

Pratik Shirodkar

Content Development Editor

Graphics

Narendrakumar Tripathi

Jason Monteiro

Technical Editor

Production Coordinator

Huzefa Unwala

Deepika Naik

About the Authors
Harmeet Singh is a senior UI developer working for CIGNEX Datamatics with varied
experience in UI. He hails from the holy city of Amritsar, India. His expertise includes
HTML5, JavaScript, jQuery, AngularJS, and Node.js. His interests include music, sports,
dancing, and ; adventure.
Harmeet has given various presentations and conducted many workshops on UI
development. On the academic front, Harmeet is a graduate in IT, and is a GNIIT diploma
holder from NIIT, specializing in software engineering.
He loves to spend time learning and discussing new technologies. He also writes technical
articles for his blog at liferayUI (http://liferayui.com). Also, he is an author of the book
on Test-Driven JavaScript Development, Packt. He can be reached on Skype at
harmeetsingh090. You can also connect with him on LinkedIn at https://in.linkedin.c
om/in/harmeetsingh090.

I would like to thank my CIGNEX project team and my best friends, Nikhil Nair and
Nayan Jyoti Talukdar, whose support and encouragement led me to write this book and
kept me motivated throughout the journey of this book. Thank you so much co-author,
Mehul Bhatt, for the excellent support.

Mehul Bhatt has over 11 years of experience and serves as a user experience (UX) &amp; user
interface (UI) practice manager at CIGNEX Datamatics. As a manager, he handles a wide
range of onshore and offshore teams. He hails from the princely state of Jamnagar, Gujarat,
India. His expertise includes HTML5, CSS3, JavaScript, jQuery, application development,
guiding and mentoring developers, and more, which helps clients to take their business to
the next level in the open market.
Mehul has also won many awards for his excellence. His interests include learning new
technologies, music, drama, sports, and exploring new places.

Mehul is Microsoft certified in HTML, CSS, and JavaScript. On the academic front, he holds
a post graduate diploma in multimedia, specialized in web development, which gives him
the skills to understand customer requirements and excel in the execution of the required
performance with the best code quality standards.
He can be reached on Skype at mehul_multimedia. You can also connect with him on
LinkedIn at https://www.linkedin.com/in/mehul-bhatt-47764b13.

I'd like to thank Harmeet Singh for collaborating with me in developing such a handy book
for aspiring developers. I can't forget to thank my wife and my daughter for supporting me
at every stage of my life.

About the Reviewer
Sandeep Neema has a bachelor's degree in computer science. Presently, he is working as a
team lead in Systems Plus Solutions, Pune. In a varied career extending over seven years,
Sandeep has worked with TCS, CIGNEX Datamatics, and Azilen Technologies Pvt. Ltd. in
different technologies. He is an Oracle-certified Java developer and ISTQB Foundation
Level certified tester.

www.PacktPub.com
For support files and downloads related to your book, please visit www.PacktPub.com.
Did you know that Packt offers eBook versions of every book published, with PDF and
ePub files available? You can upgrade to the eBook version at www.PacktPub.com and as a
print book customer, you are entitled to a discount on the eBook copy. Get in touch with us
at service@packtpub.com for more details.
At www.PacktPub.com, you can also read a collection of free technical articles, sign up for a
range of free newsletters and receive exclusive discounts and offers on Packt books and
eBooks.

https://www.packtpub.com/mapt

Get the most in-demand software skills with Mapt. Mapt gives you full access to all Packt
books and video courses, as well as industry-leading tools to help you plan your personal
development and advance your career.

Why subscribe?
Fully searchable across every book published by Packt
Copy and paste, print, and bookmark content
On demand and accessible via a web browser

Table of Contents
Preface
Chapter 1: Getting Started with React and Bootstrap
ReactJS
Setting up the environment
Installing ReactJS and Bootstrap
Installing React
Bootstrap
Installing Bootstrap
Using React
Static form with React and Bootstrap
Summary

Chapter 2: Lets Build a Responsive Theme with React-Bootstrap and
React
Setting up
Scaffolding
Navigation
React-Bootstrap
Installing React-Bootstrap
Using React-Bootstrap
Benefits of React-Bootstrap
Bootstrap grid system
Helper classes
Floats
Center elements
Show and hide
React components
React.createElement()
Summary

Chapter 3: ReactJS-JSX
What is JSX in React
Advantages of using JSX in React
How to make your code neat and clean
Acquaintance or understanding

1
7
8
10
11
12
13
14
15
17
25
26
26
28
28
31
32
32
33
38
42
42
43
43
43
44
48
50
50
51
51
52

Semantics/structured syntax
The composite component
Namespace components
JSXTransformer
Attribute expressions
Boolean attributes
JavaScript expressions

Example of a dynamic form with JSX
Summary

52
53
54
60
61
61
62
62
62
63
63
64
71

Chapter 4: DOM Interaction with ReactJS

72

Styles
Events
Attributes
Spread attributes

Props and state
Form components
Props in form components
Controlled component
Uncontrolled component
Getting the form values on submit
Ref attribute
Bootstrap helper classes
Caret
Clearfix

Summary

Chapter 5: jQuery Bootstrap Component with React
Alerts
Usage
Bootstrap alert component in React
Component lifecycle methods
Component integration
Bootstrap modal
Summary

Chapter 6: Redux Architecture

72
73
74
75
76
77
77
89
89
90
90
91
92
92
92
94
95
100
110
111

What is Redux?
Single store approach
Read-only state
Reducer functions to change the state
Architecture of Redux
[ ii ]

111
115
115
116
116

Redux's architectural benefits
Redux setup
Installing Node.js

118
118
119
119
120
122
122
123
124
125
131

Setting up the application

Development tool setup
Redux application setup
Actions
Reducers
Store
Components

Summary

Chapter 7: Routing with React

133

Advantages of React router
Installing router
Application setup
Creating routes
Page layout
Nested routes
React router
NotFoundRoute
Browser history
Query string parameters

Customizing your history further
Summary

Chapter 8: ReactJS API

133
135
135
136
138
141
144
149
150
151
153
154
155

React Top-Level API
React API component
Mount/Unmount components
Object-oriented programming
React integration with other APIs
React integration with the Facebook API
Installing Node
Setting up the application

Summary

Chapter 9: React with Node.js

155
155
156
156
159
159
159
160
179
180

Installing Node and npm
React application setup
Installing modules
Responsive Bootstrap application with React and Node
Bootstrap table
[ iii ]

181
183
184
190
203

Bootstrap responsive tables

React developer tools
Installation
How to use
Summary

204
205
205
206
209

Chapter 10: Best Practices

210

Handling data in React
Using Flux
Using Redux
Redux is equal to Flux, really?
Single-store approach
Read-only state

Immutable React state
Observables and reactive solutions
React routing
How React will help to split your code in lazy loading
JSX components
How easy is it to visualize?
Acquaintance or understanding
Semantics/structured syntax
Using classes
Using PropType
Benefits of higher-order components
Redux architectural benefits
Customizing Bootstrap for your app
Bootstrap content – typography
Bootstrap component – navbar
Bootstrap component – forms
Bootstrap component – button
Bootstrap themes
Bootstrap responsive grid system
Interesting information about ReactJS and Bootstrap projects
Helpful React projects
Things to remember
Summary

Index

211
211
212
212
213
213
214
215
215
216
217
217
218
218
219
219
219
220
220
221
223
223
225
226
226
227
228
231
231
234

[ iv ]

Preface
We all know that JavaScript applications are the future of web development, and there are
many different frameworks available to build isomorphic JavaScript web applications.
However, with the changing web development world, we all need to modernize ourselves
as developers to learn new frameworks and build new tools. It is important to analyze the
code methodology of the framework and adopt the same, rather than getting lost in the
framework market. ReactJS is an open source JavaScript library, similar to Bootstrap, used
for building user interfaces and is famously known as the V (view) in MVC. When we talk
about defining M and C, we can use other frameworks, such as Redux and Flux, to handle
the remote data.
Bootstrap is an open source frontend framework for developing responsive websites and
web applications. It includes HTML, CSS, and JavaScript code to build user interface
components. It’s a faster and easier way to develop a powerful mobile-first responsive
design. The Bootstrap library includes responsive 12-column grids and predefined classes
for easy layout options (fixed width and full width). Bootstrap has dozens of prestyled
reusable components and custom jQuery plugins, such as button, alerts, dropdowns,
modal, tooltip tab, pagination, carousal, badges, and icons.
This book starts with a detailed study of ReactJS and Bootstrap. The book further introduces
us on how to create small components of ReactJS with Twitter Bootstrap, React-Bootstrap,
and so on. It also gives us an understanding on JSX, Redux, and Node.js integration for
advanced concepts such as reducers, actions, store, live reload, and webpack. The goal is to
help readers to build responsive and scalable web applications with ReactJS and Bootstrap.

What this book covers
Chapter 1, Getting Started with React and Bootstrap, introduces ReactJS, its life cycle, and

Bootstrap with a small form component.

Chapter 2, Lets Build a Responsive Theme with React-Bootstrap and React, introduces the React-

Bootstrap integration, its benefits, and the Bootstrap-responsive grid system.

Chapter 3, ReactJS-JSX, is about the JSX, its advantages, and how it works in React with

examples.

Chapter 4, DOM Interaction with ReactJS, explains props and state in depth and how React

interacts with the DOM, with examples.

Preface
Chapter 5, jQuery Bootstrap Component with React, explores how we can integrate the

Bootstrap component into React, with examples.

Chapter 6, Redux Architecture, covers the Redux architecture with ReactJS and Node.js with

examples as well as its advantages and integration.

Chapter 7, Routing with React, showcases the React router with ReactJS and Bootstrap's nav

component with example, its advantages, and integration.

Chapter 8, ReactJS API, explores how we can integrate third-party APIs such as Facebook to

get profile info in ReactJS.

Chapter 9, React with Node.js, covers Node.js, which is set up for the server-side React

application, and also covers creating small applications using Bootstrap and ReactJS npm
modules.
Chapter 10, Best Practices, lists the best practices of creating React applications and also

helps us understand the differences between Redux and Flux, Bootstrap customization, and
a list of projects to follow.

What you need for this book
To run the examples in this book, the following tools are required:
ReactJS

15.1 and
above

https://facebook.github.io/react/

ReactJS DOM

15.1 and
above

https://facebook.github.io/react/

Babel

5.8.23

https://cdnjs.com/libraries/babel-core/5.8.23

Bootstrap

3.3.5

getbootstrap.com/

jQuery

1.10.2

http://jquery.com/download/

React-Bootstrap

1.0.0

https://react-bootstrap.github.io/

JSX Transformer

0.13.3

https://cdnjs.com/libraries/react/0.13.0

React Router library 3.0.0

https://unpkg.com/react-router@3.0.0/umd/ReactR
outer.min.js

Node.js

0.12.7

https://nodejs.org/en/blog/release/v0.12.7/

MongoDB

3.2

https://www.mongodb.org/downloads#production

[2]

Preface

Who this book is for
If you have an intermediate knowledge of HTML, CSS, and JavaScript and want to learn
how and why ReactJS and Bootstrap is the first approach for developers to create fast,
responsive, and scalable user interface of your application, then this book is for you. If your
Model, View, Controller (MVC) concept is clear, then it’s added an advantage to
understand the architecture of React.

Conventions
In this book, you will find a number of text styles that distinguish between different kinds
of information. Here are some examples of these styles and their explanations.
Code words in text, database table names, folder names, filenames, file extensions,
pathnames, dummy URLs, user input, and Twitter handles are shown as follows: &quot;Now we
need to create a couple of folders inside the chapter1 folder named images, css, and js
(JavaScript) to make your application manageable.&quot;
A block of code is set as follows:
&lt;section&gt;
&lt;h2&gt;Add your Ticket&lt;/h2&gt;
&lt;/section&gt;
&lt;script&gt;
var root = document.querySelector
('section').createShadowRoot();
root.innerHTML = '&lt;style&gt;h2{ color: red; }&lt;/style&gt;' +
'&lt;h2&gt;Hello World!&lt;/h2&gt;';
&lt;/script&gt;

When we wish to draw your attention to a particular part of a code block, the relevant lines
or items are set in bold:
&lt;div className=&quot;container&quot;&gt;
&lt;h1&gt;Welcome to EIS&lt;/h1&gt;
&lt;hr/&gt;
&lt;div className=&quot;row&quot;&gt;
&lt;div className=&quot;col-md-12 col-lg-12&quot;&gt;
{this.props.children}
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

[3]

Preface

Any command-line input or output is written as follows:
npm install &lt;package name&gt; --save

New terms and important words are shown in bold. Words that you see on the screen, for
example, in menus or dialog boxes, appear in the text like this: &quot;In the Dashboard page,
your left-hand navigation shows the Settings link. Please click on that to set the Basic and
Advanced settings for your app.&quot;
Warnings or important notes appear in a box like this.

Tips and tricks appear like this.

Reader feedback
Feedback from our readers is always welcome. Let us know what you think about this
book-what you liked or disliked. Reader feedback is important for us as it helps us develop
titles that you will really get the most out of. To send us general feedback, simply email feedback@packtpub.com, and mention the book's title in the subject of your
message. If there is a topic that you have expertise in and you are interested in either
writing or contributing to a book, refer to our author guide at www.packtpub.com/authors.

Customer support
Now that you are the proud owner of a Packt book, we have a number of things to help you
to get the most from your purchase.

[4]

Preface

Downloading the example code
You can download the example code files for this book from your account at http://www.p
acktpub.com. If you purchased this book elsewhere, you can visit http://www.packtpub.c
om/supportand register to have the files e-mailed directly to you.
You can download the code files by following these steps:
1.
2.
3.
4.
5.
6.
7.

Log in or register to our website using your e-mail address and password.
Hover the mouse pointer on the SUPPORT tab at the top.
Click on Code Downloads &amp; Errata.
Enter the name of the book in the Search box.
Select the book for which you're looking to download the code files.
Choose from the drop-down menu where you purchased this book from.
Click on Code Download.

Once the file is downloaded, please make sure that you unzip or extract the folder using the
latest version of:
WinRAR / 7-Zip for Windows
Zipeg / iZip / UnRarX for Mac
7-Zip / PeaZip for Linux
The code bundle for the book is also hosted on GitHub at https://github.com/PacktPubl
ishing/Learning-Web-Development-with-React-and-Bootstrap. We also have other
code bundles from our rich catalog of books and videos available at https://github.com/P
acktPublishing/. Check them out!

Downloading the color images of this book
We also provide you with a PDF file that has color images of the screenshots/diagrams used
in this book. The color images will help you better understand the changes in the output.
You can download this file from https://www.packtpub.com/sites/default/files/down
loads/LearningWebDevelopmentwithReactandBootstrap_ColorImages.pdf.

[5]

Preface

Errata
Although we have taken every care to ensure the accuracy of our content, mistakes do
happen. If you find a mistake in one of our books-maybe a mistake in the text or the codewe would be grateful if you could report this to us. By doing so, you can save other readers
from frustration and help us improve subsequent versions of this book. If you find any
errata, please report them by visiting http://www.packtpub.com/submit-errata, selecting
your book, clicking on the Errata Submission Form link, and entering the details of your
errata. Once your errata are verified, your submission will be accepted and the errata will
be uploaded to our website or added to any list of existing errata under the Errata section of
that title.
To view the previously submitted errata, go to https://www.packtpub.com/books/conten
t/supportand enter the name of the book in the search field. The required information will
appear under the Errata section.

Piracy
Piracy of copyrighted material on the Internet is an ongoing problem across all media. At
Packt, we take the protection of our copyright and licenses very seriously. If you come
across any illegal copies of our works in any form on the Internet, please provide us with
the location address or website name immediately so that we can pursue a remedy.
Please contact us at copyright@packtpub.com with a link to the suspected pirated
material.
We appreciate your help in protecting our authors and our ability to bring you valuable
content.

Questions
If you have a problem with any aspect of this book, you can contact us
at questions@packtpub.com, and we will do our best to address the problem.

[6]

1

Getting Started with React and
Bootstrap
There are many different ways to build modern web application with JavaScript and CSS,
including a lot of different tool choices, and a lot of new theory to learn. This book
introduces you to ReactJS and Bootstrap which you will likely come across as you learn
about modern web app development. They are both used for building fast and scalable user
interfaces. React is famously known as a the (view) in MVC. When we talk about defining
M and C we need to look somewhere else or we can use other frameworks like Redux and
Flux to handle the remote data.
The best way to learn code is to write code, so we're going to jump right in. To show you
just how easy it is to get up and running with Bootstrap and ReactJS, we're going to cover
theory and will make a super simple application that will allow us to build a form and have
it displayed on the page in real time.
You can write code in whichever way you feel comfortable. Try to create small
components/code samples, which will give you more clarity/understanding of any
technology. Now, let's see how this book is going to make your life easier when it comes to
Bootstrap and ReactJS. We are going to cover some theoretical part and build two simple,
real-time examples:
Hello World! with ReactJS
A simple static form application with React and Bootstrap
Facebook has really changed the way we think about frontend UI development with the
introduction of React. One of the main advantages of this component-based approach is that
it is easy to understand, as the view is just a function of the properties and state.

Getting Started with React and Bootstrap

We're going to cover the following topics:
Setting up the environment
ReactJS setup
Bootstrap setup
Why Bootstrap
Static form example with React and Bootstrap

ReactJS
React (sometimes called React.js or ReactJS) is an open-source JavaScript library that
provides a view for data rendered as HTML. Components have been used typically to
render React views that contain additional components specified as custom HTML tags.
React gives you a trivial virtual DOM, powerful views without templates, unidirectional
data flow, and explicit mutation. It is very methodical in updating the HTML document
when the data changes; and provides a clean separation of components on a modern singlepage application.
Observing the following example, we will have a clear idea of normal HTML encapsulation
and ReactJS custom HTML tags.
Observe the following JavaScript code snippet:
&lt;section&gt;
&lt;h2&gt;Add your Ticket&lt;/h2&gt;
&lt;/section&gt;
&lt;script&gt;
var root = document.querySelector
('section').createShadowRoot();
root.innerHTML = '&lt;style&gt;h2{ color: red; }&lt;/style&gt;' +
'&lt;h2&gt;Hello World!&lt;/h2&gt;';
&lt;/script&gt;

Observe the following ReactJS code snippet:
var sectionStyle = {
color: 'red'
};
var AddTicket = React.createClass({
render: function() {
return (&lt;section&gt;&lt;h2 style={sectionStyle}&gt;
Hello World!&lt;/h2&gt;&lt;/section&gt;)}

[8]

Getting Started with React and Bootstrap
})
ReactDOM.render(&lt;AddTicket/&gt;, mountNode);

As your app comes into existence and develops further, it's advantageous to ensure that
your components are used in the right manner. The React app consists of reusable
components, which makes code reuse, testing, and separation of concerns easy.
React is not only the V in MVC, but it also has stateful components (stateful components
remember everything within this.state). It handles mapping from input to state changes,
and it renders components. In this sense, it does everything that an MVC does.
Let's look at React's component life cycle and its different levels. We will discuss more on
this in the forthcoming chapters. Observe the following diagram:

[9]

Getting Started with React and Bootstrap

React isn't an MVC framework; it's a library for building a composable
user interface and reusable components. React is used at Facebook in its
production stages and instagram.com is entirely built on React.

Setting up the environment
When we start to make an application with ReactJS, we need to do some setup, which just
involves an HTML page and includes a few files. First, we create a directory (folder) called
chapter1. Open it up in any of your code editors. Create a new file called index.html
directly inside it and add the following HTML5 boilerplate code:
&lt;!doctype html&gt;
&lt;html class=&quot;no-js&quot; lang=&quot;&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;ReactJS Chapter 1&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!--[if lt IE 8]&gt;
&lt;p class=&quot;browserupgrade&quot;&gt;You are using an
&lt;strong&gt;outdated&lt;/strong&gt; browser.
Please &lt;a href=&quot;http://browsehappy.com/&quot;&gt;
upgrade your browser&lt;/a&gt; to improve your
experience.&lt;/p&gt;
&lt;![endif]--&gt;
&lt;!-- Add your site or application content here --&gt;
&lt;p&gt;Hello world! This is HTML5 Boilerplate.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;

This is a standard HTML page that we can update once we have included the React and
Bootstrap libraries.

[ 10 ]

Getting Started with React and Bootstrap

Now we need to create a couple of folders inside the chapter1 folder named images, css,
and js (JavaScript) to make your application manageable. Once you have completed the
folder structure it will look like this:

Installing ReactJS and Bootstrap
Once we have finished creating the folder structure, we need to install both our
frameworks, ReactJS and Bootstrap. It's as simple as including JavaScript and CSS files in
your page. We can do this via a Content Delivery Network (CDN), such as Google or
Microsoft, but we are going to fetch the files manually in our application so we don't have
to be dependent on the Internet and can work offline.

[ 11 ]

Getting Started with React and Bootstrap

Installing React
First, we have to go to this URL https://facebook.github.io/react/ and hit the
Download React v15.1.0 button:

This will give you a ZIP file of the latest version of ReactJS that includes ReactJS library files
and some sample code for ReactJS.
For now, we will only need two files in our application: react.min.js and reactdom.min.js from the build directory of the extracted folder.
Here are a few steps we need to follow:
1. Copy react.min.js and react-dom.min.js to your project directory, the
chapter1/js folder, and open up your index.html file in your editor.
2. Now you just need to add the following script in your page's head tag section:
&lt;script type=&quot;text/js&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/js&quot; src=&quot;js/react-dom.min.js&quot;&gt;&lt;/script&gt;

[ 12 ]

Getting Started with React and Bootstrap

3. Now we need to include the compiler in our project to build the code because
right now we are using tools such as npm. We will download the file from the
following CDN path, https://cdnjs.cloudflare.com/ajax/libs/babel-core
/5.8.23/browser.min.js, or you can give the CDN path directly.
4. The head tag section will look like this:
&lt;script type=&quot;text/js&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/js&quot; src=&quot;js/react-dom.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/js&quot; src=&quot;js/browser.min.js&quot;&gt;&lt;/script&gt;

Here is what the final structure of your js folder will look like:

Bootstrap
Bootstrap is an open source frontend framework maintained by Twitter for developing
responsive websites and web applications. It includes HTML, CSS, and JavaScript code to
build user interface components. It's a fast and easy way to develop a powerful mobile-first
user interface.

[ 13 ]

Getting Started with React and Bootstrap

The Bootstrap grid system allows you to create responsive 12-column grids, layouts, and
components. It includes predefined classes for easy layout options (fixed width and full
width). Bootstrap has a dozen prestyled reusable components and custom jQuery plugins,
such as button, alerts, dropdown, modal, tooltip tab, pagination, carousal, badges, icons,
and much more.

Installing Bootstrap
Now, we need to install Bootstrap. Visit http://getbootstrap.com/getting-started/#do
wnloadand hit on the Download Bootstrap button:

This includes the compiled and minified version of css and js for our app; we just need
the CSS bootstrap.min.css and fonts folder. This style sheet will provide you with the
look and feel of all the components, and is responsive layout structure for our application.
Previous versions of Bootstrap included icons as images but, in version 3, icons have been
replaced with fonts. We can also customize the Bootstrap CSS style sheet as per the
component used in your application:
1. Extract the ZIP folder and copy the Bootstrap CSS from the css folder to your
project folder's CSS.

[ 14 ]

Getting Started with React and Bootstrap

2. Now copy the fonts folder of Bootstrap into your project root directory.
3. Open your index.html in your editor and add this link tag in your head
section:
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;.

That's it. Now we can open up index.html again, but this time in your browser, to see
what we are working with. The following is the code that we have written so far:
&lt;!doctype html&gt;
&lt;html class=&quot;no-js&quot; lang=&quot;&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;ReactJS Chapter 1&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react-dom.min.js&quot;&gt;
&lt;/script&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babelcore/5.8.23/browser.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!--[if lt IE 8]&gt;
&lt;p class=&quot;browserupgrade&quot;&gt;You are using an
&lt;strong&gt;outdated&lt;/strong&gt; browser.
Please &lt;a href=&quot;http://browsehappy.com/&quot;&gt;upgrade
your browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
&lt;![endif]--&gt;
&lt;!-- Add your site or application content here --&gt;
&lt;/body&gt;
&lt;/html&gt;

Using React
So now we've got the ReactJS and Bootstrap style sheet from where we've initialized our
app. Now let's start to write our first Hello World app using ReactDOM.render().
The first argument of the ReactDOM.render method is the component we want to render
and the second is the DOM node to which it should mount (append) to. Observe the
following code:
ReactDOM.render( ReactElement element, DOMElement container,
[function callback] )

[ 15 ]

Getting Started with React and Bootstrap

In order to translate it to vanilla JavaScript, we use wraps in our React code, &lt;script
type&quot;text/babel&quot;&gt;, tag that actually performs the transformation in the browser.
Let's start out by putting one div tag in our body tag:
&lt;div id=&quot;hello&quot;&gt;&lt;/div&gt;

Now, add the script tag with React code:
&lt;script type=&quot;text/babel&quot;&gt;
ReactDOM.render(
&lt;h1&gt;Hello, world!&lt;/h1&gt;,
document.getElementById('hello')
);
&lt;/script&gt;

The XML syntax of JavaScript is called JSX. We will explore this in further chapters.
Let's open the HTML page in your browser. If you see Hello, world! in your browser then
we are on a good track. Observe the following screenshot:

[ 16 ]

Getting Started with React and Bootstrap

In the preceding screenshot, you can see it shows Hello, world! in your browser. That's
great. We have successfully completed our setup and built our first Hello World app. Here
is the complete code that we have written so far:
&lt;!doctype html&gt;
&lt;html class=&quot;no-js&quot; lang=&quot;&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;ReactJS Chapter 1&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react-dom.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babelcore/5.8.23/browser.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!--[if lt IE 8]&gt;
&lt;p class=&quot;browserupgrade&quot;&gt;You are using an
&lt;strong&gt;outdated&lt;/strong&gt; browser.
Please &lt;a href=&quot;http://browsehappy.com/&quot;&gt;upgrade your
browser&lt;/a&gt; to improve your experience.&lt;/p&gt;
&lt;![endif]--&gt;
&lt;!-- Add your site or application content here --&gt;
&lt;div id=&quot;hello&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/babel&quot;&gt;
ReactDOM.render(
&lt;h1&gt;Hello, world!&lt;/h1&gt;,
document.getElementById('hello')
);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

Static form with React and Bootstrap
We have completed our first Hello World app with React and Bootstrap and everything
looks good and as expected. Now it's time do more and create one static login form,
applying the Bootstrap look and feel to it. Bootstrap is a great way to make your app a
responsive grid system for different mobile devices and apply the fundamental styles on
HTML elements with the inclusion of a few classes and divs.

[ 17 ]

Getting Started with React and Bootstrap

The responsive grid system is an easy, flexible, and quick way to make
your web application responsive and mobile-first, that appropriately
scales up to 12 columns per device and viewport size.
First, let's start to make an HTML structure to follow the Bootstrap grid system.
Create a div and add a className .container for (fixed width) and .container-fluid
for (full width). Use the className attribute instead of using class:
&lt;div className=&quot;container-fluid&quot;&gt;&lt;/div&gt;

As we know, class and for are discouraged as XML attribute names. Moreover, these are
reserved words in many JavaScript libraries so, to have a clear difference and identical
understanding, instead of using class and for, we can use className and htmlFor.
Create a div and add the className=&quot;row&quot;. The row must be placed within .containerfluid:
&lt;div className=&quot;container-fluid&quot;&gt;
&lt;div className=&quot;row&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

Now create columns that must be immediate children of a row:
&lt;div className=&quot;container-fluid&quot;&gt;
&lt;div className=&quot;row&quot;&gt;
&lt;div className=&quot;col-lg-6&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

.row and .col-xs-4 are predefined classes that are available for quickly making grid

layouts.

Add the h1 tag for the title of the page:
&lt;div className=&quot;container-fluid&quot;&gt;
&lt;div className=&quot;row&quot;&gt;
&lt;div className=&quot;col-sm-6&quot;&gt;
&lt;h1&gt;Login Form&lt;/h1&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

[ 18 ]

Getting Started with React and Bootstrap

Grid columns are created by the given specified number of col-sm-* of 12 available
columns. For example, if we are using a four column layout, we need to specify to colsm-3 lead-in equal columns:
Class name Devices
col-sm-*

Small devices

col-md-*

Medium devices

col-lg-*

Large devices

We are using the col-sm-* prefix to resize our columns for small devices. Inside the
columns, we need to wrap our form elements label and input tags into a div tag with the
form-group class:
&lt;div className=&quot;form-group&quot;&gt;
&lt;label for=&quot;emailInput&quot;&gt;Email address&lt;/label&gt;
&lt;input type=&quot;email&quot; className=&quot;form-control&quot; id=&quot;emailInput&quot;
placeholder=&quot;Email&quot;/&gt;
&lt;/div&gt;

Forget the style of Bootstrap; we need to add the form-control class in our input
elements. If we need extra padding in our label tag then we can add the control-label
class on the label.
Let's quickly add the rest of the elements. I am going to add a password and submit
button.
In previous versions of Bootstrap, form elements were usually wrapped in an element with
the form-action class. However, in Bootstrap 3, we just need to use the same form-group
instead of form-action. We will discuss Bootstrap classes and responsiveness in more
detail in Chapter 2, Lets Build a Responsive Theme with React-Bootstrap and React.
Here is our complete HTML code:
&lt;div className=&quot;container-fluid&quot;&gt;
&lt;div className=&quot;row&quot;&gt;
&lt;div className=&quot;col-lg-6&quot;&gt;
&lt;form&gt;
&lt;h1&gt;Login Form&lt;/h1&gt;
&lt;hr/&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label for=&quot;emailInput&quot;&gt;Email address&lt;/label&gt;
&lt;input type=&quot;email&quot; className=&quot;form-control&quot;
id=&quot;emailInput&quot; placeholder=&quot;Email&quot;/&gt;

[ 19 ]

Getting Started with React and Bootstrap
&lt;/div&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label for=&quot;passwordInput&quot;&gt;Password&lt;/label&gt;
&lt;input type=&quot;password&quot; className=
&quot;form-control&quot; id=&quot;passwordInput&quot;
placeholder=&quot;Password&quot;/&gt;
&lt;/div&gt;
&lt;button type=&quot;submit&quot; className=&quot;btn btn-default
col-xs-offset-9 col-xs-3&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

Now create one object inside the var loginFormHTML script tag and assign this HTML:
Var loginFormHTML = &lt;div className=&quot;container-fluid&quot;&gt;
&lt;div className=&quot;row&quot;&gt;
&lt;div className=&quot;col-lg-6&quot;&gt;
&lt;form&gt;
&lt;h1&gt;Login Form&lt;/h1&gt;
&lt;hr/&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label for=&quot;emailInput&quot;&gt;Email
address&lt;/label&gt;
&lt;input type=&quot;email&quot; className=&quot;form-control&quot;
id=&quot;emailInput&quot; placeholder=&quot;Email&quot;/&gt;
&lt;/div&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label for=&quot;passwordInput&quot;&gt;Password&lt;/label&gt;
&lt;input type=&quot;password&quot; className=&quot;formcontrol&quot; id=&quot;passwordInput&quot; placeholder=&quot;Password&quot;/&gt;
&lt;/div&gt;
&lt;button type=&quot;submit&quot; className=&quot;btn btn-default col-xsoffset-9 col-xs-3&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;/div&gt;

[ 20 ]

Getting Started with React and Bootstrap

We will pass this object in the React.DOM() method instead of directly passing the HTML:
ReactDOM.render(LoginformHTML,document.getElementById('hello'));

Our form is ready. Now let's see how it looks in the browser:

The compiler is unable to parse our HTML because we have not enclosed one of the div
tags properly. You can see in our HTML that we have not closed the wrapper containerfluid at the end. Now close the wrapper tag at the end and open the file again in your
browser.
Whenever you hand code (write) your HTML code, please double-check
your start tag and end tag. It should be written/closed properly, otherwise
it will break your UI/frontend look and feel.
Here is the HTML after closing the div tag:
&lt;!doctype html&gt;
&lt;html class=&quot;no-js&quot; lang=&quot;&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;ReactJS Chapter 1&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react-dom.min.js&quot;&gt;

[ 21 ]

Getting Started with React and Bootstrap
&lt;/script&gt;
&lt;script src=&quot;js/browser.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;!-- Add your site or application content here --&gt;
&lt;div id=&quot;loginForm&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/babel&quot;&gt;
var LoginformHTML =
&lt;div className=&quot;container-fluid&quot;&gt;
&lt;div className=&quot;row&quot;&gt;
&lt;div className=&quot;col-lg-6&quot;&gt;
&lt;form&gt;
&lt;h1&gt;Login Form&lt;/h1&gt;
&lt;hr/&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label for=&quot;emailInput&quot;&gt;Email address&lt;/label&gt;
&lt;input type=&quot;email&quot; className=&quot;form-control&quot; id=
&quot;emailInput&quot; placeholder=&quot;Email&quot;/&gt;
&lt;/div&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label for=&quot;passwordInput&quot;&gt;Password&lt;/label&gt;
&lt;input type=&quot;password&quot; className=&quot;form-control&quot;
id=&quot;passwordInput&quot; placeholder=&quot;Password&quot;/&gt;
&lt;/div&gt;
&lt;button type=&quot;submit&quot; className=&quot;btn btn-default
col-xs-offset-9 col-xs-3&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
ReactDOM.render(LoginformHTML,document.getElementById
('loginForm');
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

[ 22 ]

Getting Started with React and Bootstrap

Now, you can check your page on a browser and you will be able to see the form with the
look and feel as shown in the following screenshot:

[ 23 ]

Getting Started with React and Bootstrap

Now it's working fine and looks good. Bootstrap also provides two additional classes to
make your elements smaller and larger: input-lg and input-sm. You can also check the
responsive behavior by resizing the browser. Observe the following screenshot:

That looks great. Our small static login form application is ready with responsive behavior.
As this is an introductory chapter, a question might come to your mind of how will React be
helpful or beneficial?
Here's your answer:
Rendering your component is very easy
Reading a component's code would be very easy with help of JSX

[ 24 ]

Getting Started with React and Bootstrap

JSX will also help you to check your layout as well as checking components plug
in with each other
You can test your code easily and it also allows other tools to integrate for
enhancement
React is a view layer, and you can also use it with other JavaScript frameworks
The preceding points are very high-level and we will see more benefits in detail with the
upcoming examples in the chapters that follow.

Summary
Our simple static login form application and Hello World examples are looking great and
working exactly how they should, so let's recap what we've learned in the this chapter.
To begin with, we saw just how easy it is to get ReactJS and Bootstrap installed with the
inclusion of JavaScript files and a style sheet. We also looked at how the React application is
initialized and started building our first form application.
The Hello World app and form application which we have created demonstrates some of
React's and Bootstrap's basic features such as the following:
ReactDOM
Render
Browserify
Bootstrap
With Bootstrap, we worked towards having a responsive grid system for different mobile
devices and applied the fundamental styles of HTML elements with the inclusion of a few
classes and divs.
We also saw the framework's new mobile-first responsive design in action without
cluttering up our markup with unnecessary classes or elements.
In Chapter 2, Lets Build a Responsive Theme with React-Bootstrap and React, we will delve into
Bootstrap's features and how to use the grid. We are going to explore some more Bootstrap
fundamentals and introduce the project we are going to build over the course of this book.

[ 25 ]

2

Lets Build a Responsive Theme
with React-Bootstrap and React
Now, that you've completed your first web app using ReactJS and Bootstrap, we're going to
build the first responsive theme for your app using both the frameworks. We'll also be
touching on the full potential of both frameworks. So, let's start!

Setting up
Firstly, we need to create a similar folder structure to our Hello World app which we made
in Chapter 1, Getting Started with React and Bootstrap.

Lets Build a Responsive Theme with React-Bootstrap and React

The following screenshot describes the folder structure:

Now you need to copy the ReactJS and Bootstrap files from chapter1 into the significant
directories of Chapter2 and create an index.html file in the root. The following code
snippet is just a base HTML page which includes Bootstrap and React.
Here is the markup of our HTML page:
&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;ReactJS theme with bootstrap&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react-dom.min.js&quot;&gt;
&lt;/script&gt;

[ 27 ]

Lets Build a Responsive Theme with React-Bootstrap and React
&lt;script src=&quot;js/browser.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;

Scaffolding
So now we have the base file and the folder structure sorted. The next step is to start
scaffolding our app using the Bootstrap CSS.
I'm sure you have a question: what is scaffolding? Simply, it gives a support structure to
make your base concrete.
Apart from this, we will use React-Bootstrap JS in which we have a collection of Bootstrap
components rebuilt for React. We can use these throughout our Employee Information
System (EIS). Bootstrap also includes an extremely powerful responsive grid system which
helps us to create a responsive theme layout/template/structure for the app.

Navigation
Navigation is a very important element of any static or dynamic page. So now we are going
to build a navbar (for navigation) to switch between our pages. It could be placed at the top
of our page.
Here is the basic HTML structure of Bootstrap navigation:
&lt;nav className=&quot;navbar navbar-default navbar-static-top&quot; role=&quot;navigation&quot;&gt;
&lt;div className=&quot;container&quot;&gt;
&lt;div className=&quot;navbar-header&quot;&gt;
&lt;button type=&quot;button&quot; className=&quot;navbar-toggle&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
&lt;span className=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;
&lt;span className=&quot;icon-bar&quot;&gt;&lt;/span&gt;
&lt;span className=&quot;icon-bar&quot;&gt;&lt;/span&gt;
&lt;span className=&quot;icon-bar&quot;&gt;&lt;/span&gt;
&lt;/button&gt;
&lt;a className=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;EIS&lt;/a&gt;
&lt;/div&gt;
&lt;div className=&quot;navbar-collapse collapse&quot;&gt;
&lt;ul className=&quot;nav navbar-nav&quot;&gt;
&lt;li className=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Edit Profile&lt;/a&gt;&lt;/li&gt;

[ 28 ]

Lets Build a Responsive Theme with React-Bootstrap and React
&lt;li className=&quot;dropdown&quot;&gt;
&lt;a href=&quot;#&quot; className=&quot;dropdown-toggle&quot;
data-toggle=&quot;dropdown&quot;&gt;Help Desk
&lt;b className=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;
&lt;ul className=&quot;dropdown-menu&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;View Tickets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;New Ticket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/nav&gt;

The &lt;nav&gt; tag that used to hold everything within the navbar, is instead split into two
sections: navbar-header and navbar-collapse, if you see the navigation structure.
Navbars are responsive components so the navbar-header element is exclusively for
mobile navigation and controls the expansion and collapse of the navigation with the
toggle button. The data-target attribute on the button directly corresponds with the id
attribute of the navbar-collapse element so Bootstrap knows what element should be
wrapped in mobile devices to control the toggling.
Now we also need to include jQuery in your page because Bootstrap's JS has a dependency
on it. You can get the latest jQuery version from http://jquery.com/. Now you need to
copy bootstrap.min.js from the Bootstrap extracted folder and add this to your app js
directory, as well as include it on your page before bootstrap.min.js.
Please make sure that your JavaScript files are included in the following order:
&lt;script
&lt;script
&lt;script
&lt;script
&lt;script

type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
type=&quot;text/javascript&quot; src=&quot;js/react-dom.min.js&quot;&gt;&lt;/script&gt;
src=&quot;js/browser.min.js&quot;&gt;&lt;/script&gt;
src=&quot;js/jquery-1.10.2.min.js&quot;&gt;&lt;/script&gt;
src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;

Let's take a quick look at the navbar component code after integrating in React:
&lt;div id=&quot;nav&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/babel&quot;&gt;
var navbarHTML =
&lt;nav className=&quot;navbar navbar-default navbar-static-top&quot;
role=&quot;navigation&quot;&gt;
&lt;div className=&quot;container&quot;&gt;
&lt;div className=&quot;navbar-header&quot;&gt;
&lt;button type=&quot;button&quot; className=&quot;navbar-toggle&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;

[ 29 ]

Lets Build a Responsive Theme with React-Bootstrap and React
&lt;span className=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;
&lt;span className=&quot;icon-bar&quot;&gt;&lt;/span&gt;
&lt;span className=&quot;icon-bar&quot;&gt;&lt;/span&gt;
&lt;span className=&quot;icon-bar&quot;&gt;&lt;/span&gt;
&lt;/button&gt;
&lt;a className=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;EIS&lt;/a&gt;
&lt;/div&gt;
&lt;div className=&quot;navbar-collapse collapse&quot;&gt;
&lt;ul className=&quot;nav navbar-nav&quot;&gt;
&lt;li className=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Edit Profile&lt;/a&gt;&lt;/li&gt;
&lt;li className=&quot;dropdown&quot;&gt;
&lt;a href=&quot;#&quot; className=&quot;dropdown-toggle&quot;
data-toggle=&quot;dropdown&quot;&gt;Help Desk &lt;b className=&quot;caret&quot;&gt;
&lt;/b&gt;&lt;/a&gt;
&lt;ul className=&quot;dropdown-menu&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;View Tickets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;New Ticket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/nav&gt;
ReactDOM.render(navbarHTML,document.getElementById('nav'));
&lt;/script&gt;

[ 30 ]

Lets Build a Responsive Theme with React-Bootstrap and React

Open the index.html file in your browser to see the navbar component. The following
screenshot shows what our navigation will look like:

We have included navigation directly within our &lt;body&gt; tag to cover the full width of the
browser. Now we will do the same thing by using the React-Bootstrap JS framework to
understand the difference between Bootstrap JS and React-Bootstrap JS.

React-Bootstrap
The React-Bootstrap JavaScript framework is similar to Bootstrap rebuilt for React. It's a
complete reimplementation of the Bootstrap frontend reusable components in React. ReactBootstrap has no dependency on any other framework, such as Bootstrap JS or jQuery. It
means that, if you are using React-Bootstrap, then you don't need to include jQuery in your
project as a dependency. Using React-Bootstrap, we can be sure that there won't be external
JavaScript calls to render the component which might be incompatible with the
ReactDOM.render. However, you can still achieve the same functionality, look, and feel as
Twitter Bootstrap, but with much cleaner code.
[ 31 ]

Lets Build a Responsive Theme with React-Bootstrap and React

Installing React-Bootstrap
To get this React-Bootstrap, we can either use the CDN directly or from the following URL:
https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.29.5/react-bootstrap
.min.js. Open this URL and save it in your local directory for fast performance. When you

download the file, please make sure to download the source-map (reactbootstrap.min.js.map) file along with it to make debugging much easier. Once you are
done with the download, add that library in your app's js directory and include it in your
page's head section as shown in the following code snippet. Your head section will look as
follows:
&lt;script
&lt;script
&lt;script
&lt;script

type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
type=&quot;text/javascript&quot; src=&quot;js/react-dom.min.js&quot;&gt;&lt;/script&gt;
src=&quot;js/browser.min.js&quot;&gt;&lt;/script&gt;
src=&quot;js/react-bootstrap.min.js&quot;&gt;&lt;/script&gt;

Using React-Bootstrap
Now, you may be wondering that since we have the Bootstrap file already and we are also
adding the React-Bootstrap JS file, won't they conflict with each other? No, they will not.
React-Bootstrap is compatible with the existing Bootstrap styles so we don't need to worry
about any conflicts.
Now we are going to create the same Navbar component in React-Bootstrap.
Here, is the structure of the Navbar component in React-Bootstrap:
var Nav= ReactBootstrap.Nav;
var Navbar= ReactBootstrap.Navbar;
var NavItem= ReactBootstrap.NavItem;
var NavDropdown = ReactBootstrap.NavDropdown;
var MenuItem= ReactBootstrap.MenuItem;
var navbarReact =(
&lt;Navbar&gt;
&lt;Navbar.Header&gt;
&lt;Navbar.Brand&gt;
&lt;a href=&quot;#&quot;&gt;EIS&lt;/a&gt;
&lt;/Navbar.Brand&gt;
&lt;Navbar.Toggle /&gt;
&lt;/Navbar.Header&gt;
&lt;Navbar.Collapse&gt;
&lt;Nav&gt;
&lt;NavItem eventKey={1} href=&quot;#&quot;&gt;Home&lt;/NavItem&gt;
&lt;NavItem eventKey={2} href=&quot;#&quot;&gt;Edit Profile&lt;/NavItem&gt;

[ 32 ]

Lets Build a Responsive Theme with React-Bootstrap and React
&lt;NavDropdown eventKey={3} id=&quot;basicnav-dropdown&quot;&gt;
&lt;MenuItem eventKey={3.1}&gt;View Tickets&lt;/MenuItem&gt;
&lt;MenuItem eventKey={3.2}&gt;New Ticket&lt;/MenuItem&gt;
&lt;/NavDropdown&gt;
&lt;/Nav&gt;
&lt;/Navbar.Collapse&gt;
&lt;/Navbar&gt;
);

Here is the highlight of the preceding code (with the order changed from below the benefits
section above it).
The &lt;Navbar&gt; tag is a container of the component and it splits into two sections:
&lt;Navbar.Header&gt; and &lt;Nav&gt;.
For responsive behavior, we have added the &lt;Navbar.Toggle/&gt; tag, that controls expand
and collapse, and wrapped the &lt;Nav&gt; into the &lt;Navbar.Collapse&gt; to show and hide the
nav items.
For capturing the event, we have used eventKey={1}; when we select any menu item, a
callback is fired which takes two arguments, (eventKey: any, event: object) =&gt; any

Benefits of React-Bootstrap
Let's check out the benefits of using React-Bootstrap.
As you can see in the preceding code, it looks cleaner than the Twitter Bootstrap component
because we can import the individual component from React-Bootstrap rather than
including the entire library.
For example, if I want to build a navbar with a Twitter Bootstrap then the code structure is:
&lt;nav class=&quot;navbar navbar-default&quot;&gt;
&lt;div class=&quot;container-fluid&quot;&gt;
&lt;div class=&quot;navbar-header&quot;&gt;
&lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbarcollapse-1&quot; aria-expanded=&quot;false&quot;&gt;
&lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;
&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
&lt;/button&gt;
&lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;EIS&lt;/a&gt;

[ 33 ]

Lets Build a Responsive Theme with React-Bootstrap and React
&lt;/div&gt;
&lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-examplenavbar-collapse-1&quot;&gt;
&lt;ul class=&quot;nav navbar-nav&quot;&gt;
&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Home &lt;span class=
&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Edit Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;form class=&quot;navbar-form navbar-left&quot; role=&quot;search&quot;&gt;
&lt;div class=&quot;form-group&quot;&gt;
&lt;input type=&quot;text&quot; class=&quot;form-control&quot;
placeholder=&quot;Search&quot;&gt;
&lt;/div&gt;
&lt;button type=&quot;submit&quot; class=&quot;btn
btn-default&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;!-- /.navbar-collapse --&gt;
&lt;/div&gt;
&lt;!-- /.container-fluid --&gt;
&lt;/nav&gt;

Now it's easy for you to compare the code and I'm sure, you will also agree to use ReactBootstrap as it's very component specific, whereas in Twitter Bootstrap we need to maintain
multiple elements with the correct order to get similar results.
By doing this, React-Bootstrap pulls only specific components that we want to include and
helps to reduce your app bundle size significantly. React-Bootstrap provides certain benefits
as follows:
React-Bootstrap saves a bit of typing and reduces bugs by compressing the
Bootstrap code
It reduces conflicts by compressing the Bootstrap code
We don't need to think about the different approaches taken by Bootstrap versus
React
It is easy to use
It encapsulates in elements
It uses JSX syntax
It avoids React rendering of the virtual DOM
It is easy to detect DOM changes and update the DOM without any conflict
It doesn't have any dependency on other libraries, such as jQuery

[ 34 ]

Lets Build a Responsive Theme with React-Bootstrap and React

Here, is the full code view of our Navbar component:
&lt;div id=&quot;nav&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/babel&quot;&gt;
var Nav= ReactBootstrap.Nav;
var Navbar= ReactBootstrap.Navbar;
var NavItem= ReactBootstrap.NavItem;
var NavDropdown = ReactBootstrap.NavDropdown;
var MenuItem= ReactBootstrap.MenuItem;
var navbarReact =(
&lt;Navbar&gt;
&lt;Navbar.Header&gt;
&lt;Navbar.Brand&gt;
&lt;a href=&quot;#&quot;&gt;EIS&lt;/a&gt;
&lt;/Navbar.Brand&gt;
&lt;Navbar.Toggle /&gt;
&lt;/Navbar.Header&gt;
&lt;Navbar.Collapse&gt;
&lt;Nav&gt;
&lt;NavItem eventKey={1} href=&quot;#&quot;&gt;Home&lt;/NavItem&gt;
&lt;NavItem eventKey={2} href=&quot;#&quot;&gt;Edit Profile&lt;/NavItem&gt;
&lt;NavDropdown eventKey={3} id=&quot;basicnav-dropdown&quot;&gt;
&lt;MenuItem eventKey={3.1}&gt;View Tickets&lt;/MenuItem&gt;
&lt;MenuItem eventKey={3.2}&gt;New Ticket&lt;/MenuItem&gt;
&lt;/NavDropdown&gt;
&lt;/Nav&gt;
&lt;/Navbar.Collapse&gt;
&lt;/Navbar&gt;
);
ReactDOM.render(navbarReact,document.getElementById('nav'));

Woohoo! Let's take a look at our first React-Bootstrap component in the browser. The
following screenshot shows what the component will look like:

[ 35 ]

Lets Build a Responsive Theme with React-Bootstrap and React

Now to check the Navbar, If you resize your browser window, you'll notice that Bootstrap
displays the mobile header with the toggle button below 768 px screen size of the tablet in
portrait mode. However, if you click the button to toggle the navigation, you can see the
navigation for the mobile.

[ 36 ]

Lets Build a Responsive Theme with React-Bootstrap and React

The following screenshot shows what the mobile navigation will look like:

So now we have a major understanding of React-Bootstrap and Bootstrap. React-Bootstrap
has active development efforts in place in to keep it updated.

[ 37 ]

Lets Build a Responsive Theme with React-Bootstrap and React

Bootstrap grid system
Bootstrap is based on a 12-column grid system which includes a powerful responsive
structure and a mobile-first fluid grid system that allows us to scaffold our web app with
very few elements. In Bootstrap, we have a predefined series of classes to compose rows
and columns, so before we start, we need to include the &lt;div&gt; tag with the container
class to wrap our rows and columns. Otherwise, the framework won't respond as expected
because Bootstrap has written CSS which is dependent on it and we need to add it below
our navbar:
&lt;div class=&quot;container&quot;&gt;&lt;div&gt;

This will make your web app the center of the page as well as control the rows and columns
to work as expected in response.
There are four class prefixes which help to define the behavior of the columns. All the
classes are related to different device screen sizes and react in familiar ways. The following
table from http://getbootstrap.com/ defines the variations between all four classes:
Extra small devices
Phones (&lt;768px)

Small devices
Tablets (≥768px)

Medium
devices
Desktops
(≥992px)

Large
devices
Desktops
(≥1200px)

Grid behavior

Horizontal at all
times

Collapsed to start,
horizontal above
breakpoints

Container width

None (auto)

750px

970px

1170px

Class prefix

.col-xs-

.col-sm-

.col-md-

.col-lg-

# of columns

12

Column width

Auto

~62px

~81px

~97px

Gutter width

30px (15px on each
side of a column)

Nestable

Yes

Offsets

Yes

Column ordering Yes

[ 38 ]

Lets Build a Responsive Theme with React-Bootstrap and React

In our application, we need to create a two column layout for the main content area and
sidebar. As we know, Bootstrap has a 12 column grid layout so divide your content in a
way which covers the whole area.
Please understand, Bootstrap divides the 12 column grid by using col*-1 to col-*-12 classes.

We'll divide the 12 columns into two parts: one is nine columns for the main content and
the other is three columns for the sidebar. Sounds perfect. So, here's how we implement
that.
First we need to include the &lt;div&gt; tag inside our container and add the class as &quot;row&quot;.
We can have as many div tags with the row class as per the design needs, which can each
house upto 12 columns.
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;/div&gt;
&lt;div&gt;

As we all know, if we want our columns to stack on mobile devices, we should use colsm- prefixes. Creating a column is as simple as taking the desired prefix and appending the
number of columns you wish to add to it.
Let's take a quick look at how we can create a two column layout:
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm-3&quot;&gt;
Column Size 3 for smaller devices
&lt;/div&gt;
&lt;div class=&quot;col-sm-9&quot;&gt;
Column Size 9 for smaller devices
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

If we want our columns to stack not only for smaller devices, use the extra small and
medium grid classes by adding col-md-* and col-xs-* to your columns:
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-xs-12 col-md-4&quot;&gt;

[ 39 ]

Lets Build a Responsive Theme with React-Bootstrap and React

In mobile view, this column will be full width and in tablet view, it will be four medium
grid width.
&lt;/div&gt;
&lt;div class=&quot;col-xs-12 col-md-8&quot;&gt;
In mobile view, this column will be full width and in tablet view, it will
be eight medium grid width.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

So when it displays on a larger screen than a mobile device, Bootstrap will automatically
add 30 px gutter spacing (the space between two elements) between each column (15 px on
either side). If we want to add additional spaces between the columns, Bootstrap will
provide a way to do this by just adding the additional class to the column:
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-xs-12 col-md-7 col-md-offset-1&quot;&gt;

Columns in a mobile are one full width and the other half width with more space from the
left:
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

So this time we have used the offset keyword. The number at the end of that class name is
to control the number of columns you want to offset.
The offset column count is equal to the total number of 12 columns in
the row.

Now, let's create some complex layout with nested additional rows and columns:
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm-9&quot;&gt;
Level 1 - Lorem ipsum...
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-xs-8 col-sm-4&quot;&gt;
Level 2 - Lorem ipsum...
&lt;/div&gt;
&lt;div class=&quot;col-xs-4 col-sm-4&quot;&gt;
Level 2 - Lorem ipsum...
&lt;/div&gt;
&lt;/div&gt;

[ 40 ]

Lets Build a Responsive Theme with React-Bootstrap and React
&lt;/div&gt;
&lt;/div&gt;

If you open it up in your browser, you will see that this will create two columns within our
main content container, col-sm-9, which we created earlier. However, as our grid is
nested, we can create a new row and have a single column or two columns, whatever your
layout requires. I have added some dummy text to demonstrate the nested columns.
Bootstrap will also provide the option to change the ordering of the columns in the grid
system by using the col-md-push-* and col-md-pull-* classes.
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm-9&quot;&gt;
Level 1 - Lorem ipsum...
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-xs-8 col-sm-4 col-sm-push-4&quot;&gt;
Level 2 - col-xs-8 col-sm-4 col-sm-push-4
&lt;/div&gt;
&lt;div class=&quot;col-xs-4 col-sm-4 col-sm-pull-4&quot;&gt;
Level 2 - col-xs-8 col-sm-4 col-sm-pull4
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

Observe the following screenshot:

Bootstrap also includes some predefined classes to enable elements to be shown or hidden
at specific screen sizes. The classes use the same predefined sizes as Bootstrap's grid.
For example, the following will hide an element at a specific screen size:
&lt;div class=&quot;hidden-md&quot;&gt;&lt;/div&gt;

This will hide the element on medium devices but it will still be visible on mobiles, tablets,
and large desktops. To hide an element on multiple devices, we need to use multiple
classes:
&lt;div class=&quot;hidden-md hidden-lg&quot;&gt;&lt;/div&gt;

Likewise, the same with the visible classes, which work in reverse, showing elements at
specific sizes.
[ 41 ]

Lets Build a Responsive Theme with React-Bootstrap and React

However, unlike the hidden classes, they also require us to set the display value. This can
be block, inline, or inline-block:
&lt;div class=&quot;visible-md-block&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;visible-md-inline&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;visible-md-inline-block&quot;&gt;&lt;/div&gt;

Of course, we can use various classes in one element. If, for example, we wanted a block
level element on a smaller screen, but have it become an inline-block later, we would
use the following code:
&lt;div class=&quot;visible-sm-block visible-md-inline-block&quot;&gt;&lt;/div&gt;

If you can't remember the various class sizes, be sure to take another look at the Getting to
Bootstrap's grid section to learn the screen sizes.

Helper classes
Bootstrap also includes a few helper classes that we can use to adapt our layout. Let's take a
look at some examples.

Floats
Floating classes of Bootstrap will help you to create a decent layout on the web. Here are
two Bootstrap classes to pull your elements left and right:
&lt;div class=&quot;pull-left&quot;&gt;...&lt;/div&gt;
&lt;div class=&quot;pull-right&quot;&gt;...&lt;/div&gt;

When we are using floats on elements, we need to wrap our floated elements in a clearfix
class. This will clear the elements and you will be able to see the actual height of the
container element:
&lt;div class=&quot;helper-classes&quot;&gt;
&lt;div class=&quot;pull-left&quot;&gt;...&lt;/div&gt;
&lt;div class=&quot;pull-right&quot;&gt;...&lt;/div&gt;
&lt;div class=&quot;clearfix&quot;&gt;
&lt;/div&gt;

[ 42 ]

Lets Build a Responsive Theme with React-Bootstrap and React

If the float classes are directly within an element with the row class, then our floats are
cleared automatically by Bootstrap and the clearfix class does not need to be applied
manually.

Center elements
To make it center block-level elements, Bootstrap allows this with the center-block class:
&lt;div class=&quot;center-block&quot;&gt;...&lt;/div&gt;

This will set your element property margin-left and margin-right properties to auto,
which will center the element.

Show and hide
You may wish to show and hide elements with CSS, and Bootstrap gives you a couple of
classes to do this:
&lt;div class=&quot;show&quot;&gt;...&lt;/div&gt;
&lt;div class=&quot;hidden&quot;&gt;...&lt;/div&gt;

The show class sets the display property to block, so only apply this to
block-level elements and not to elements you wish to be displayed
inline or inline-block.

React components
React is based on a modular build, with encapsulated components that manage their own
state so it will efficiently update and render your components when data changes. In React,
a component's logic is written in JavaScript instead of templates so you can easily pass rich
data through your app and manage the state out of the DOM.
Using the render() method, we are rendering a component in React that takes input data
and returns what you want to display. It can either take HTML tags (strings) or React
components (classes).

[ 43 ]

Lets Build a Responsive Theme with React-Bootstrap and React

Let's take a quick look at examples of both:
var myReactElement = &lt;div className=&quot;hello&quot; /&gt;;
ReactDOM.render(myReactElement, document.getElementById('example'));

In this example, we are passing HTML as a string into the render method which we have
used before creating the &lt;Navbar&gt;:
var ReactComponent = React.createClass({/*...*/});
var myReactElement = &lt;ReactComponent someProperty={true} /&gt;;
ReactDOM.render(myReactElement, document.getElementById('example'));

In the preceding example, we are rendering the component, just to create a local variable
that starts with an uppercase convention. Using the upper versus lowercase convention in
React's JSX will distinguish between local component classes and HTML tags.
So, we can create our React elements or components in two ways: either we can use Plain
JavaScript with React.createElement or React's JSX.
So, let's create our sidebar elements for the app to better understand the
React.createElement.

React.createElement()
Using JSX in React is completely optional for creating the React app. As we know, we can
create elements with React.createElement which take three arguments: a tag name or
component, a properties object, and a variable number of child elements, which is optional.
Observe the following code:
var profile = React.createElement('li',{className:'list-group-item'},
'Profile');
var profileImageLink = React.createElement('a',{className:'centerblock text-center',href:'#'},'Image');
var profileImageWrapper = React.createElement('li',
{className:'list-group-item'}, profileImageLink);
var sidebar = React.createElement('ul', { className: 'listgroup' }, profile, profileImageWrapper);
ReactDOM.render(sidebar, document.getElementById('sidebar'));

[ 44 ]

Lets Build a Responsive Theme with React-Bootstrap and React

In the preceding example, we have used React.createElement to generate a ul–li
structure. React already has built-in factories for common DOM HTML tags.
Here is an example for this:
var Sidebar = React.DOM.ul({ className: 'list-group' },
React.DOM.li({className:'list-group-item text-muted'},'Profile'),
React.DOM.li({className:'list-group-item'},
React.DOM.a({className:'center-block text-center',href:'#'},'Image')
),
React.DOM.li({className:'list-group-item text-right'},'2.13.2014',
React.DOM.span({className:'pull-left'},
React.DOM.strong({className:'pull-left'},'Joining Date')
),
React.DOM.div({className:'clearfix'})
));
ReactDOM.render(Sidebar, document.getElementById('sidebar'));

Let's take a quick look at our code in a browser, which should resemble the following
screenshot:

Here is our full code so far that we have written to include the &lt;Navbar&gt; component:
&lt;script type=&quot;text/babel&quot;&gt;
var Nav= ReactBootstrap.Nav;
var Navbar= ReactBootstrap.Navbar;
var NavItem= ReactBootstrap.NavItem;
var NavDropdown = ReactBootstrap.NavDropdown;
var MenuItem= ReactBootstrap.MenuItem;
var navbarReact =(
&lt;Navbar&gt;
&lt;Navbar.Header&gt;
&lt;Navbar.Brand&gt;
&lt;a href=&quot;#&quot;&gt;EIS&lt;/a&gt;
&lt;/Navbar.Brand&gt;
&lt;Navbar.Toggle /&gt;
&lt;/Navbar.Header&gt;

[ 45 ]

Lets Build a Responsive Theme with React-Bootstrap and React
&lt;Navbar.Collapse&gt;
&lt;Nav&gt;
&lt;NavItem eventKey={1} href=&quot;#&quot;&gt;Home&lt;/NavItem&gt;
&lt;NavItem eventKey={2} href=&quot;#&quot;&gt;Edit Profile&lt;/NavItem&gt;
&lt;NavDropdown eventKey={3} id=&quot;basicnav-dropdown&quot;&gt;
&lt;MenuItem eventKey={3.1}&gt;View Tickets&lt;/MenuItem&gt;
&lt;MenuItem eventKey={3.2}&gt;New Ticket&lt;/MenuItem&gt;
&lt;/NavDropdown&gt;
&lt;/Nav&gt;
&lt;/Navbar.Collapse&gt;
&lt;/Navbar&gt;
);
ReactDOM.render(navbarReact,document.getElementById('nav'));
var Sidebar = React.DOM.ul({ className: 'list-group' },
React.DOM.li({className:'list-group-item text-muted'},'Profile'),
React.DOM.li({className:'list-group-item'},
React.DOM.a({className:'center-block
text-center',href:'#'},'Image')
),
React.DOM.li({className:'list-group-item text-right'},
'2.13.2014',
React.DOM.span({className:'pull-left'},
React.DOM.strong({className:'pull-left'},'Joining Date')
),
React.DOM.div({className:'clearfix'})
));
ReactDOM.render(Sidebar, document.getElementById('sidebar'));
&lt;/script&gt;
&lt;div id=&quot;nav&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm-3&quot; id=&quot;sidebar&quot;&gt;
&lt;!--left col--&gt;
&lt;/div&gt;
&lt;!--/col-3--&gt;
&lt;div class=&quot;col-sm-9 profile-desc&quot;&gt;&lt;/div&gt;
&lt;!--/col-9--&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!--/row--&gt;

[ 46 ]

Lets Build a Responsive Theme with React-Bootstrap and React

Our app code looks very messy. Now it's time to make our code clean and properly
structured.
Copy the navbar code in another file and save it as navbar.js.
Now copy the sidebar code in another file and save as sidebar.js.
Create one folder in your root directory with the name of the components and copy both
navbar.js and sidebar.js inside it.
Include both the js file in your head section.
The head section will look like this:
&lt;script
&lt;script
&lt;script
&lt;script
&lt;script
&lt;script
&lt;script

type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
type=&quot;text/javascript&quot; src=&quot;js/react-dom.min.js&quot;&gt;&lt;/script&gt;
src=&quot;js/browser.min.js&quot;&gt;&lt;/script&gt;
src=&quot;js/jquery-1.10.2.min.js&quot;&gt;&lt;/script&gt;
src=&quot;js/react-bootstrap.min.js&quot;&gt;&lt;/script&gt;
src=&quot;components/navbar.js&quot; type=&quot;text/babel&quot;&gt;&lt;/script&gt;
src=&quot;components/sidebar.js&quot; type=&quot;text/babel&quot;&gt;&lt;/script&gt;

And here is your HTML code:
&lt;div id=&quot;nav&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm-3&quot; id=&quot;sidebar&quot;&gt;
&lt;!--left col--&gt;
&lt;/div&gt;
&lt;!--/col-3--&gt;
&lt;div class=&quot;col-sm-9 profile-desc&quot;&gt;&lt;/div&gt;
&lt;!--col-9--&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!--/row--&gt;

[ 47 ]

Lets Build a Responsive Theme with React-Bootstrap and React

Now our code looks much cleaner. Let's take a quick look at your code output in a browser:

When we are referring to the ReactJS file from an external source, we need
a web server or full stack app such as WAMP or XAMPP because some
browsers (for example, Chrome) will fail to load the file unless it's served
via HTTP.

Summary
We have developed considerable basic knowledge of Bootstrap and React-Bootstrap from
this chapter, so let's quickly revise what we have learnt so far.
While going through the definition and use of Bootstrap and React-Bootstrap we saw that
React-Bootstrap is a very strong candidate with more flexibility and a smarter solution.

[ 48 ]

Lets Build a Responsive Theme with React-Bootstrap and React

We have seen how we can create mobile navigation by just using a few features of
Bootstrap and React-Bootstrap, which work well on all expected devices as well as on
desktop browsers.
We also looked at the powerful responsive grid system including Bootstrap and created a
simple two-column layout. While we were doing this, we learnt about the four different
column class prefixes as well as nesting our grid.
We have also seen some very good features of Bootstrap such as offset, col-md-push-*,
col-md-pull-*, hidden-md, hidden-lg, visible-sm-block, visible-md-inlineblock, and helper-classes.
We hope you are also ready with your responsive layout and navigation. So now let's jump
on to the next chapter.

[ 49 ]

3

ReactJS-JSX
In the previous chapter, we went through the process of building responsive themes with
the help of React-Bootstrap and React. We saw examples for it and the difference between
Twitter Bootstrap and React-Bootstrap.
I'm very excited now as we are going to look into the core of ReactJS, which is JSX. So, are
you ready folks? Let's dive deep into learning about ReactJS-JSX.

What is JSX in React
JSX is an extension of JavaScript syntax, and if you observe the syntax or structure of JSX,
you will find it similar to XML coding.
With JSX, you can carry out preprocessor footsteps that add XML syntax to JavaScript.
Though you can certainly use React without JSX, JSX makes React a lot more neat and
elegant. Similar to XML, JSX tags have tag names, attributes, and children, and in that, if an
attribute value is enclosed in quotes, that value becomes a string.
XML works with balanced opening and closing tags. JSX works similarly, and it also helps
to read and understand a huge amount of structures easily than JavaScript functions and
objects.

ReactJS-JSX

Advantages of using JSX in React
Here is a list of a few advantages:
JSX is very simple to understand and think about, as compared to JavaScript
functions
Markup of JSX would be more familiar to non-programmers
By using JSX, your markup becomes more semantic, organized, and significant

How to make your code neat and clean
As I said earlier, the structure/syntax is so easy to visualize/notice, which is intended for
more clean and understandable code in JSX format when we compare it with JavaScript
syntax.
The following are simple code snippets that will give you a clear idea. Let's see the code
snippets in the following example of JavaScript syntax while rendering:
render: function () {
return React.DOM.div({className:&quot;divider&quot;},
&quot;Label Text&quot;,
React.DOM.hr()
);
}

Observe the following JSX syntax:
render: function () {
return &lt;div className=&quot;divider&quot;&gt;
Label Text&lt;hr /&gt;
&lt;/div&gt;;
}

I'm assuming that it is clear now that JSX is really easy to understand for programmers who
are generally not used to dealing with coding, and they can learn and execute it as if they
are executing HTML language.

[ 51 ]

ReactJS-JSX

Acquaintance or understanding
In the development region, UI developers, user experience designers, and quality assurance
people are not very familiar with any programming language, but JSX makes their life easy
by providing a simple syntax structure, which is visually similar to a HTML structure.
JSX shows a path to indicate and see through your mind's eye, the structure in a solid and
concise way.

Semantics/structured syntax
Until now, we have seen how JSX syntax is easy to understand and visualize, the reason
being the semantic syntax structure.
JSX converts your JavaScript code into a more standard solution, which gives clarity to set
your semantic syntax and significant component. With the help of JSX syntax, you can
declare the structure of your custom component with information, the way you do in
HTML syntax, and that will provide the magic to transform your syntax to JavaScript
functions.
The React.DOM namespace helps us to use all HTML elements with the help of ReactJS:
Isn't it an amazing feature! Moreover, the good part is that you can write your own named
components with the help of the React.DOM namespace.
Please check out the following simple HTML markup and how JSX components help you to
have semantic markup:
&lt;div className=&quot;divider&quot;&gt;
&lt;h2&gt;Questions&lt;/h2&gt;&lt;hr /&gt;
&lt;/div&gt;

As you can see in the preceding example, we have wrapped &lt;h2&gt;Questions&lt;/h2&gt;&lt;hr /&gt;
with the &lt;div&gt; tag, which has a className=&quot;divider&quot;. So, in the React composite
component, you can create a similar structure and it is as easy as when working with
HTML coding with semantic syntax:
&lt;Divider&gt; Questions &lt;/Divider&gt;

Let's see in detail what the composite component is and how we can build it.

[ 52 ]

ReactJS-JSX

The composite component
As we know, you can create your custom component with JSX markup and JSX syntax, and
transform your component to a JavaScript syntax component.
Let's set up JSX:
&lt;script
&lt;script
&lt;script
&lt;script

type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
type=&quot;text/javascript&quot; src=&quot;js/react-dom.min.js&quot;&gt;&lt;/script&gt;
src=&quot;js/browser.min.js&quot;&gt;&lt;/script&gt;
src=&quot;js/divider.js&quot; type=&quot;text/babel&quot;&gt;&lt;/script&gt;

Include the following files in your HTML:
&lt;div&gt;
&lt;Divider&gt;...&lt;/Divider&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/div&gt;

Add this HTML in your &lt;body&gt; section.
Now, we are all set to define the custom component using JSX as we have the JSX file ready
to be worked on.
To create a custom component, we have to express the following mentioned HTML markup
as a React custom component. You have to just follow the given example to execute your
wrapped syntax/code, and in return after rendering, it will give you the expected markup
result. The Divider.js file would contain:
var Divider = React.createClass({
render: function () {
return (
&lt;div className=&quot;divider&quot;&gt;
&lt;h2&gt;Questions&lt;/h2&gt;&lt;hr /&gt;
&lt;/div&gt;
);
}
});

If you want to append the child node to your component then it's possible in React-JSX. In
the preceding code, you can see that we have created one variable named divider and,
with the help of React-JSX, we can use it as a HTML tag as we are using defined HTML tags
like &lt;div&gt;, &lt;span&gt;, and so on. Do you remember that we have used the following markup
in our earlier example? If not, then please refer to the previous topic again, as it will clear up
your doubts.
[ 53 ]

ReactJS-JSX
&lt;Divider&gt;Questions&lt;/Divider&gt;

As in the HTML syntax, here the child nodes are captured between the open and close tags
in an array, which you can set in your component's props (properties).
In this example, we will use this.props.children = [&quot;Questions&quot;] where
this.props.children is React's method:
var Divider = React.createClass({
render: function () {
return (
&lt;div className=&quot;divider&quot;&gt;
&lt;h2&gt;{this.props.children}&lt;/h2&gt;&lt;hr /&gt;
&lt;/div&gt;
);
}
});

As we have seen in the preceding example, we can create components with open and close
tags the way we do in any HTML coding:
&lt;Divider&gt;Questions&lt;/Divider&gt;

And we will get the expected output as follows:
&lt;div className=&quot;divider&quot;&gt;
&lt;h2&gt;Questions&lt;/h2&gt;&lt;hr /&gt;
&lt;/div&gt;

Namespace components
A namespace component is another feature request that is available in React JSX. I know
you'll have a question: what is a namespace component? OK, let me explain.
We know that JSX is just an extension of JavaScript syntax and it also provides the ability to
use namespace so React is using JSX namespace pattern rather than XML namespacing. By
using the standard JavaScript syntax approach, which is object property access, this feature
is useful for assigning components directly as &lt;Namespace.Component/&gt;, rather than
assigning variables to access components that are stored in an object.

[ 54 ]

ReactJS-JSX

Let's start by looking at the following show/hide example to have a clear idea about
namespace components:
var MessagePanel = React.createClass({
render: function() {
return &lt;div className='collapse in'&gt; {this.props.children} &lt;/div&gt;
}
});
var MessagePanelHeading = React.createClass({
render: function() {
return &lt;h2&gt;{this.props.text}&lt;/h2&gt;}
});
var MessagePanelContent = React.createClass({
render: function() {
return &lt;div className='well'&gt; {this.props.children} &lt;/div&gt;
}
});

From the following example, we will see how we can compose a MessagePanel:
&lt;MessagePanel&gt;
&lt;MessagePanelHeading text='Show/Hide' /&gt;
&lt;MessagePanelContent&gt;
Phasellus sed velit venenatis, suscipit eros a, laoreet dui.
&lt;/MessagePanelContent&gt;
&lt;/MessagePanel&gt;

A MessagePanel is a component that consents to rendering a message in your user
interface.
It primarily has two sections:
MessagePanelHeading: This displays the heading/title of the message
MessagePanelContent: This is the content of the message

There is a healthier way to compose MessagePanel by namespacing the children. This can
be achieved by making child components as attributes on the parent component.
Let's see how to do this:
var MessagePanel = React.createClass({
render: function() {
return &lt;div className='collapse in'&gt;
{this.props.children} &lt;/div&gt;
}
});

[ 55 ]

ReactJS-JSX
MessagePanel.Heading = React.createClass({
render: function() {
return &lt;h2&gt;{this.props.text}&lt;/h2&gt;
}
});
MessagePanel.Content = React.createClass({
render: function() {
return &lt;div className='well'&gt; {this.props.children} &lt;/div&gt;
}
});

So, in the preceding snippets, you can see how we have extended MessagePanel by just
adding new React components, Heading and Content.
Now, let's see how the composition changes when we bring the namespace notation :
&lt;MessagePanel&gt;
&lt;MessagePanel.Heading text='Show/Hide' /&gt;
&lt;MessagePanel.Content&gt;
Phasellus sed velit venenatis, suscipit eros a, laoreet dui.
&lt;/MessagePanel.Content&gt;
&lt;/MessagePanel&gt;

Now we will see practical examples of namespace component code after integrating in
React with Bootstrap:
&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;React JS – Namespacing component&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/custom.css&quot;&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/JSXTransformer.js&quot;&gt;
&lt;/script&gt;
&lt;/head&gt;
&lt;script type=&quot;text/jsx&quot;&gt;
/** @jsx React.DOM */
var MessagePanel = React.createClass({
render: function() {
return &lt;div className='collapse in'&gt; {this.props.children}
&lt;/div&gt;
}
});
MessagePanel.Heading = React.createClass({
render: function() {

[ 56 ]

ReactJS-JSX
return &lt;h2&gt;{this.props.text}&lt;/h2&gt;
}
});
MessagePanel.Content = React.createClass({
render: function() {
return &lt;div className='well'&gt; {this.props.children} &lt;/div&gt;
}
});
var MyApp = React.createClass({
getInitialState: function() {
return {
collapse: false
};
},
handleToggle: function(evt){
var nextState = !this.state.collapse;
this.setState({collapse: nextState});
},
render: function() {
var showhideToggle = this.state.collapse ?
(&lt;MessagePanel&gt;
&lt;MessagePanel.Heading text='Show/Hide' /&gt;
&lt;MessagePanel.Content&gt;
Phasellus sed velit venenatis, suscipit eros a,
laoreet dui.
&lt;/MessagePanel.Content&gt;
&lt;/MessagePanel&gt;)
: null;
return (&lt;div&gt;
&lt;h1&gt;Namespaced Components Demo&lt;/h1&gt;
&lt;p&gt;&lt;button onClick={this.handleToggle} className=&quot;btn
btn-primary&quot;&gt;Toggle&lt;/button&gt;&lt;/p&gt;
{showhideToggle}
&lt;/div&gt;)
}
});
React.render(&lt;MyApp/&gt;, document.getElementById('toggleexample'));
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div id=&quot;toggle-example&quot; class=”col-sm-12”&gt;

[ 57 ]

ReactJS-JSX
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;

Let me explain the preceding code:
The State property contains the state set by setState and getInitialState
of our component
The setState(changes) method applies the given changes to this state and rerenders it
The handleToggle function handles the state of our component and returns the
Boolean values true or false
We have also used some Bootstrap classes to give a look and feel to our component:
.collapse: This is for hiding the content.
.collapse.in: This is for showing the content.
.well: This is for background, border, and spacing around the content.
.btn .btn-primary: This is for the button look and feel. Bootstrap has also

provided you some different classes with different color styles that help readers
to provide a visual indication:
.btn-default, .btn-success, .btn-info, .btn-warning,
.btn-danger, and .btn-link.
We can use &lt;a&gt;, &lt;button&gt;, or the &lt;input&gt; element.
.col-sm-12: This is to make your component responsive on small screens.

[ 58 ]

ReactJS-JSX

Now, let's open your HTML in a browser and look at the output:

Now resize the screen and see how it looks:

[ 59 ]

ReactJS-JSX

It looks amazing!

JSXTransformer
JSXTransformer is another tool to compile JSX in a browser. While reading code, the
browser will read attribute type=&quot;text/jsx&quot; in your mentioned &lt;script&gt; tag and it
will only transform those scripts that have a mentioned type attribute and then it will
execute your script or written function in that file. The code will be executed in the same
manner as react-tools executes on the server. Visit https://facebook.github.io/reac
t/blog/2015/06/12/deprecating-jstransform-and-react-tools.htmlfor more.

[ 60 ]

ReactJS-JSX

JSXTransformer is deprecating in the current version of React, but you can find the current
version on any provided CDNs and Bower. As per my opinion, it would be great to use the
Babel REPL (https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=fal
se&amp;presets=es2015%2Creact%2Cstage-2&amp;code=) tool to compile JavaScript. It has already
been adopted by React and the broader JavaScript community.
This example will not work with the latest version of React. Use an older
version such as 0.13, as JSXTransformer is deprecated and it's replaced by
Babel to transform and run the JSX code in the browser. The browser will
only understand your &lt;script&gt; tags when it has the
type=&quot;text/babel&quot; type attribute, which we have used previously in
examples from Chapter 1, Getting Started with React and Bootstrap and
Chapter 2, Lets Build a Responsive Theme with React-Bootstrap and React.

Attribute expressions
If you look at the preceding show/hide example, you can see that we have used attribute
expressions to show the message panel and hide it. In React, there is a small change in
writing an attribute value, in JavaScript expressions we write attributes in quotes (&quot;&quot;), but
in React we have to provide a pair of curly braces ({}):
var showhideToggle = this.state.collapse ? (&lt;MessagePanel&gt;):null/&gt;;

Boolean attributes
Boolean attributes have two values, they can either be true or false, and if we neglect the
value in JSX while declaring attributes, then by default it takes the value as true. If we
want to have a false attribute value, then we have to use an attribute expression. This
scenario can occur regularly when we use HTML form elements, for example, the
disabled attribute, the required attribute, the checked attribute, and the readOnly
attribute.
In the Bootstrap example aria-haspopup=&quot;true&quot;aria-expanded=&quot;true&quot;:
// example of writing disabled attribute in JSX
&lt;input type=&quot;button&quot; disabled /&gt;;
&lt;input type=&quot;button&quot; disabled={true} /&gt;;

[ 61 ]

ReactJS-JSX

JavaScript expressions
As seen in the preceding example, you can embed JavaScript expressions in JSX using
syntax that will be accustomed to any handlebars user, for example, style = {
displayStyle } allocates the value of the displayStyle JavaScript variable to the
element's style attribute.

Styles
The same as expressions, you can set styles by assigning an ordinary JavaScript object to the
style attribute. How interesting. If someone tells you not to write CSS syntax, you can still
write JavaScript code to achieve this, with no extra effort. Isn't that superb! Yes, it is.

Events
There is a set of event handlers that you can bind in a way that should look familiar to
anybody who knows HTML.
Some names of React event handlers are as follows:
Clipboard events
Composition events
Keyboard events
Focus events
Form events
Mouse events
Selection events
Touch events
UI events
Wheel events
Media events
Image events
Animation events
Transition events

[ 62 ]

ReactJS-JSX

Attributes
Some defined PropTypes of JSX are as follows:
React.PropTypes.array
React.PropTypes.bool
React.PropTypes.func
React.PropTypes.number
React.PropTypes.object
React.PropTypes.string
React.PropTypes.symbol

If you are aware of all the properties well in advance, then it will be helpful when creating
your component in JSX:
var component = &lt;Component foo={x} bar={y} /&gt;;

Changing props is bad practice, let's see how.
Generally, as per our practice, we set properties on to the object that is non-recommended
standard in attribute:
var component = &lt;Component /&gt;;
component.props.foo = x; // bad
component.props.bar = y; // also bad

As shown in the preceding example, you can see the anti-pattern, which is not best practice.
If you don't know about properties of JSX attributes then propTypes won't be set and it will
throw errors that would be difficult for you to trace.
props are a very sensitive part of attributes, so you should not change them, as each prop

has a predefined method and you should use it as it is meant to be used, like when we use
other JavaScript methods or HTML tags. This doesn't mean that it is impossible to change
props. It is possible, but it is against the standard defined by React. Even in React, it will
throw an error.

Spread attributes
Let's check out the JSX feature–spread attributes:
var props = {};
props.foo = x;

[ 63 ]

ReactJS-JSX
props.bar = y;
var component = &lt;Component {...props} /&gt;;

As you can see in the preceding example, the properties that you have declared have
become part of your component's props as well.
Reusability of attributes is also possible here and you can also map it with other attributes.
But you have to be very careful in ordering your attributes while you declare it, as it will
override the previous declared attribute with the last declared one:
var props = { foo: 'default' };
var component = &lt;Component {...props} foo={'override'} /&gt;;
console.log(component.props.foo); // 'override'

Hopefully, you now have a clear idea about JSX, JSX expressions, and attributes. So, let's
check out how we can build simple forms with the help of JSX dynamically.

Example of a dynamic form with JSX
Before starting on a dynamic form with JSX, we must be aware of JSX form libraries.
Generally, HTML form element inputs take their value as display text/values, but in React
JSX, they take property values of respective elements and display it. As we have already
visually perceived that we can't change props values directly, so the input value won't
have that transmuted value as an exhibit value.
Let's discuss this in detail. To change the value of a form input you will use the value
attribute and then you will see no change. That doesn't mean that we cannot change the
form input value, but for that we need to listen to the input events and you will see that the
value changes.
The following exceptions are self-explanatory, but very important:
Textarea content will be considered as a value prop in React

As For is a reserved keyword of JavaScript, the HTML for the attribute should be
bounded like the htmlFor prop
Now it's time to learn that to have form elements in the output, we need to use the
following script, and we also need to replace it with the previously written code.

Now let's start on building an Add Ticket form for our application.
[ 64 ]

ReactJS-JSX

Create a React-JSXform.html file in the root. The following code snippet is just a base
HTML page that includes Bootstrap and React.
Here is the markup of our HTML page:
&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Dynamic form with JSX&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react-dom.min.js&quot;&gt;
&lt;/script&gt;
&lt;script src=&quot;js/browser.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

It is always good practice to load all your scripts at the bottom of the page before your
&lt;body&gt; tag closes, which loads the component successfully in your DOM, because when
the script is executed in the &lt;head&gt; section, the document element is not available because
the script itself is in the &lt;head&gt; section. The best solution to resolve this problem is to keep
scripts at the bottom of your page before your &lt;body&gt; tag closes, and it will be executed
after loading all your DOM elements, which will not throw any JavaScript error.
Now let's create &lt;form&gt; elements with Bootstrap and JSX:
&lt;form&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label htmlFor=&quot;email&quot;&gt;Email &lt;span style={style}&gt;*&lt;/span&gt;
&lt;/label&gt;
&lt;input type=&quot;text&quot; id=&quot;email&quot; className=&quot;form-control&quot;
placeholder=&quot;Enter email&quot; required/&gt;
&lt;/div&gt;
&lt;/form&gt;

In the preceding code, we have used class as className and for as htmlFor, since JSX is
similar to JavaScript and for and class are identifiers in JavaScript. We should use
className and htmlFor as property names in the ReactDOM component.

[ 65 ]

ReactJS-JSX

All the form elements &lt;input&gt;, &lt;select&gt;, and &lt;textarea&gt; will get the global styling
with the .form-control class, and will apply the width:100% by default. So when we are
using a label with inputs, we need to wrap it with a .form-group class for optimum
spacing.
For our Add Ticket form, we need these following form fields along with the label:
Email: &lt;input&gt;
Issue type: &lt;select&gt;
Assign department: &lt;select&gt;
Comments: &lt;textarea&gt;
Button: &lt;button&gt;

To make it a responsive form, we will use *col-* classes.
Let's take a quick look at our form component code:
var style = {color: &quot;#ffaaaa&quot;};
var AddTicket = React.createClass({
handleSubmitEvent: function (event) {
event.preventDefault();
},
render: function() {
return (
&lt;form onSubmit={this.handleSubmitEvent}&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label htmlFor=&quot;email&quot;&gt;Email &lt;span style={style}&gt;*
&lt;/span&gt;&lt;/label&gt;
&lt;input type=&quot;text&quot; id=&quot;email&quot; className=&quot;formcontrol&quot; placeholder=&quot;Enter email&quot; required/&gt;
&lt;/div&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label htmlFor=&quot;issueType&quot;&gt;Issue Type &lt;span style=
{style}&gt;*&lt;/span&gt;&lt;/label&gt;
&lt;select className=&quot;form-control&quot; id=&quot;issueType&quot;
required&gt;
&lt;option value=&quot;&quot;&gt;-----Select----&lt;/option&gt;
&lt;option value=&quot;Access Related Issue&quot;&gt;Access
Related Issue&lt;/option&gt;
&lt;option value=&quot;Email Related Issues&quot;&gt;Email
Related Issues&lt;/option&gt;
&lt;option value=&quot;Hardware Request&quot;&gt;Hardware
Request&lt;/option&gt;
&lt;option value=&quot;Health &amp; Safety&quot;&gt;Health &amp;
Safety&lt;/option&gt;

[ 66 ]

ReactJS-JSX
&lt;option value=&quot;Network&quot;&gt;Network&lt;/option&gt;
&lt;option value=&quot;Intranet&quot;&gt;Intranet&lt;/option&gt;
&lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;
&lt;/select&gt;
&lt;/div&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label htmlFor=&quot;department&quot;&gt;Assign Department
&lt;span style={style}&gt;*&lt;/span&gt;&lt;/label&gt;
&lt;select className=&quot;form-control&quot; id=&quot;department&quot;
required&gt;
&lt;option value=&quot;&quot;&gt;-----Select----&lt;/option&gt;
&lt;option value=&quot;Admin&quot;&gt;Admin&lt;/option&gt;
&lt;option value=&quot;HR&quot;&gt;HR&lt;/option&gt;
&lt;option value=&quot;IT&quot;&gt;IT&lt;/option&gt;
&lt;option value=&quot;Development&quot;&gt;Development
&lt;/option&gt;
&lt;/select&gt;
&lt;/div&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label htmlFor=&quot;comments&quot;&gt;Comments &lt;span style=
{style}&gt;*&lt;/span&gt;&lt;/label&gt;(&lt;span id=&quot;maxlength&quot;&gt;
200&lt;/span&gt; characters left)
&lt;textarea className=&quot;form-control&quot; rows=&quot;3&quot;
id=&quot;comments&quot; required&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div className=&quot;btn-group&quot;&gt;
&lt;button type=&quot;submit&quot; className=&quot;btn btn-primary&quot;&gt;
Submit&lt;/button&gt;
&lt;button type=&quot;reset&quot; className=&quot;btn btn-link&quot;&gt;
cancel&lt;/button&gt;
&lt;/div&gt;
&lt;/form&gt;
);
}
});
ReactDOM.render(
&lt;AddTicket /&gt;
,
document.getElementById('form')
);

[ 67 ]

ReactJS-JSX

To apply a style or call an onSubmit function in the attribute value, rather than using
quotes (&quot;&quot;), we have to use a pair of curly braces ({}) in the JavaScript expression. Now,
create one component folder and save this file as a form.js in that folder, and then include
it in your HTML page. This is what our page will look like:
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot; /&gt;
&lt;title&gt;Dynamic form with JSX&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm-12 col-md-6&quot;&gt;
&lt;h2&gt;Add Ticket&lt;/h2&gt;
&lt;hr/&gt;
&lt;div id=&quot;form&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/react-dom.min.js&quot;&gt;
&lt;/script&gt;
&lt;script src=&quot;js/browser.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;component/form.js&quot; type=&quot;text/babel&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

[ 68 ]

ReactJS-JSX

Let's take a quick look at our component's output in the browser:

Oh, cool! This is looking awesome.

[ 69 ]

ReactJS-JSX

Let's check out the form component's responsive behavior while resizing the browser:

[ 70 ]

ReactJS-JSX

The first character should always be a capital when you create a
component in React. For example, AddTicket.

Summary
In this chapter, we have seen how JSX plays an important role in making custom
components, as well as making them very simple to visualize, understand, and write.
The key examples shown in this chapter will help you to understand JSX syntax and its
implementation.
The last example in this chapter covered the responsive Add Ticket form with JSX along
with Bootstrap, which gave you an idea about JSX syntax execution and how to create your
custom component. You can use it and instrument it easily as you play with HTML.
If you are still not sure about JSX and its behavior, then I recommend that you go through
this chapter again, as it will also help you when looking at future chapters.
If you fully understand this chapter, then let's move on to Chapter 4, DOM Interaction with
ReactJS which is all about DOM interacting with React, and where we will see DOM's
interaction with ReactJS. It's an interesting chapter as when we talk about interactivity
between inputs and outputs, we have to consider backend code and DOM elements. You
will see some very interesting topics like, props and state, controlled component,
uncontrolled component, non-DOM attributes keys and references, and many more with
examples.

[ 71 ]

4

DOM Interaction with ReactJS
In the previous chapter, we learned what JSX is and how we can create a component in JSX.
As with many other frameworks, React also has other prototypes to help us build our web
app. Every framework has different ways to interact with DOM elements. React uses a fast,
internal synthetic DOM to perform diffs and compute the most efficient DOM mutation for
you where your component actually lives.
React components are similar to functions that take props and state (this will be explained
in a later section). React components only render the single root node. If we want to render
multiple nodes, then they must be wrapped into the single root node.
Before we start working with form components, we should first take a look at props and
state.

Props and state
React components translate your raw data into Rich HTML, the props and state together
build with that raw data to keep your UI consistent.
OK, let's identify what exactly it is:
Props and state are both plain JS objects.
They are triggered with a render update.
React manages the component state by calling setState(data,callback). This
method will merge data into this state, and re-renders the component to keep our
UI up to date. For example, the state of the drop-down menu (visible or hidden).
React component props (properties) that don't change over time. For example,
drop-down menu items. Sometimes components only take some data with this
props method and render it, which makes your component stateless.

DOM Interaction with ReactJS

Using props and state together helps you make an interactive app.

Refer to this live example from Chapter 3, ReactJS-JSX. You will have a better working
understanding of state and properties.
In this example, we are managing the state of toggle (show or hide) and the text of toggle
buttons as properties.

Form components
In React, form components differ from other native components because they can be
modified via user interaction such as &lt;input&gt;, &lt;textarea&gt;, and &lt;option&gt;.
[ 73 ]

DOM Interaction with ReactJS

Here is the list of supported events:
onChange, onInput, and onSubmit
onClick, onContextMenu, onDoubleClick, onDrag, onDragEnd,
onDragEnter, and onDragExit
onDragLeave, onDragOver, onDragStart, onDrop, onMouseDown,
onMouseEnter, and onMouseLeave
onMouseMove, onMouseOut, onMouseOver, and onMouseUp

A full list of supported events can be found in the official documentation at

https://facebook.github.io/react/docs/events.html#supported-events.

Props in form components
As we know, ReactJS components have their own props and state-like forms that support a
few props that are affected via user interaction:
&lt;input&gt; and &lt;textarea&gt;
Components

Supported Props

&lt;input&gt; and &lt;textarea&gt;

Value, defaultValue

&lt;input&gt; type of checkbox or radio Checked, defaultChecked
&lt;select&gt;

Selected, defaultValue

In an HTML &lt;textarea&gt; component, the value is set via children, but in
React it can be set by value. The onChange prop is supported by all
native components such as other DOM events, and can listen to all bubble
change events.
The onChange prop works across the browser when the user interacts and changes:
The value of &lt;input&gt; and &lt;textarea&gt;
The checked state of the &lt;input&gt; type of radio and checkbox
The selected state of the &lt;option&gt; component
Throughout the chapter, we'll demonstrate how we can control a component with the
properties (prop) and state we've just looked at. We'll then take a look at how we can apply
them from the component to control the behavior.
[ 74 ]

DOM Interaction with ReactJS

Controlled component
The first component we're going to look at is the one that controls the user input into
textarea, which prevents user input when the characters have reached the max length; it
will also update the remaining characters when the user inputs:
render: function() {
return &lt;textarea className=&quot;form-control&quot; value=&quot;fdgdfgd&quot; /&gt;;
}

In the preceding code, we have declared the value of textarea, so when the user inputs, it
will have no effect on changing the value of textarea. To control this, we need to use the
onChange event:
var style = {color: &quot;#ffaaaa&quot;};
var max_Char='140';
var Teaxtarea = React.createClass({
getInitialState: function() {
return {value: 'Controlled!!!', char_Left: max_Char};
},
handleChange: function(event) {
var input = event.target.value;
this.setState({value: input});
},
render: function() {
return (
&lt;form&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label htmlFor=&quot;comments&quot;&gt;Comments &lt;span style=
{style}&gt;*&lt;/span&gt;&lt;/label&gt;(&lt;span&gt;
{this.state.char_Left}&lt;/span&gt; characters left)
&lt;textarea className=&quot;form-control&quot; value=
{this.state.value} maxLength={max_Char} onChange=
{this.handleChange} /&gt;
&lt;/div&gt;
&lt;/form&gt;
);
}
})

Observe the following screenshot:

[ 75 ]

DOM Interaction with ReactJS

In the preceding screenshot, we are accepting and controlling the value provided by the
user and updating the prop value of the &lt;textarea&gt; component.
The this.state() should only contain the minimal amount of data
needed to represent your UI's state.

But now we also want to update the remaining characters of textarea in &lt;span&gt;:
this.setState({
value: input.substr(0, max_Char),char_Left: max_Char input.length
});

In the preceding code, this would control the remaining value of textarea and update
the remaining characters when the user inputs.

Uncontrolled component
As we've seen in ReactJS, when using the value property we can control the user input, so
&lt;textarea&gt; without the value property is an uncontrolled component:
render: function() {
return &lt;textarea className=&quot;form-control&quot;/&gt;
}

This will render the textarea with an empty value and the user is allowed to input the
value that would be reflected immediately by the rendered element because the
uncontrolled component has its own internal state. If you want to initialize the default
value, we need to use the defaultValue prop:
[ 76 ]

DOM Interaction with ReactJS
render:function() {
return &lt;textarea className=&quot;form-control&quot; defaultValue=&quot;Lorem
lipsum&quot;/&gt;
}

It look's like the controlled component, which we have seen before.

Getting the form values on submit
As we've seen, the state and prop will give you the control to alter the value of the
component and handle the state for that component.
OK, now let's add some advanced features in our Add Ticket form, which can validate the
user input and display the tickets on the UI.

Ref attribute
React provides ref non-DOM attributes to access the component. The ref attribute can be
a callback function and it will execute immediately after the component is mounted.
So we will attach the ref attribute in our form element to fetch the values:
var AddTicket = React.createClass({
handleSubmitEvent: function (event) {
event.preventDefault();
console.log(&quot;Email--&quot;+this.refs.email.value.trim());
console.log(&quot;Issue Type--&quot;+this.refs.issueType.value.trim());
console.log(&quot;Department--&quot;+this.refs.department.value.trim());
console.log(&quot;Comments--&quot;+this.refs.comment.value.trim());
},
render: function() {
return (
);
}
});

Now, we'll add the JSX of form elements inside the return method:
&lt;form onSubmit={this.handleSubmitEvent}&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label htmlFor=&quot;email&quot;&gt;Email &lt;span style={style}&gt;*&lt;/span&gt;
&lt;/label&gt;
&lt;input type=&quot;text&quot; id=&quot;email&quot; className=&quot;form-control&quot;
placeholder=&quot;Enter email&quot; required ref=&quot;email&quot;/&gt;

[ 77 ]

DOM Interaction with ReactJS
&lt;/div&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label htmlFor=&quot;issueType&quot;&gt;Issue Type &lt;span style={style}&gt;*
&lt;/span&gt;&lt;/label&gt;
&lt;select className=&quot;form-control&quot; id=&quot;issueType&quot; required
ref=&quot;issueType&quot;&gt;
&lt;option value=&quot;&quot;&gt;-----Select----&lt;/option&gt;
&lt;option value=&quot;Access Related Issue&quot;&gt;Access Related
Issue&lt;/option&gt;
&lt;option value=&quot;Email Related Issues&quot;&gt;Email Related
Issues&lt;/option&gt;
&lt;option value=&quot;Hardware Request&quot;&gt;Hardware Request&lt;/option&gt;
&lt;option value=&quot;Health &amp; Safety&quot;&gt;Health &amp; Safety&lt;/option&gt;
&lt;option value=&quot;Network&quot;&gt;Network&lt;/option&gt;
&lt;option value=&quot;Intranet&quot;&gt;Intranet&lt;/option&gt;
&lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;
&lt;/select&gt;
&lt;/div&gt;
&lt;div className=&quot;form-group&quot;&gt;
&lt;label htmlFor=&quot;department&quot;&gt;Assign Department &lt;span style=
{style}&gt;*&lt;/span&gt;&lt;/label&gt;
&lt;select className=&quot;form-control&quot; id=&quot;department&quot; required
ref=&quot;depart</pre></div>                                                                    </div>
                            </div>
                        </div>
                    </td>
                </tr>
                <tr style="height:60px">
                    <td id="footer" valign="top">
                        <div class="container-fluid">
<!-- footer begin -->
<div class="row ">
        <div class="footer-copyright w-5-hide w-3-2-show-inline">
        <span class="w-5-hide w-1-2-show p-left-0">Since 2009.</span>
        <span class="w-3-show w-1-2-hide p-left-0">Free ebooks since 2009.</span>
    </div>
        <div class="footer-right w-5-hide w-4-2-show">
        <div class="footer-nav-right" role="navigation">
            <ul class="nav navbar-nav">
                
        <li class="icon-link">
            <a href="/android" title="<div style='white-space: nowrap;'>ZLibrary app</div>" data-toggle="tooltip" data-html="true" onmouseover="$(this).tooltip('show')">
                <img src="/img/icon-android.svg" class="colored" width="36" height="36">
                <img src="/img/icon-android-gray.svg" class="gray" width="36" height="36">
            </a>
        </li>
        
        <li class="icon-link">
            <button onclick="window.location.replace('http://loginzlib2vrak5zzpcocc3ouizykn6k5qecgj2tzlnab5wcbqhembyd.onion')" data-toggle="tooltip" data-placement="top" data-html="true" title="<div style='white-space: nowrap;'>TOR version</div>" onmouseover="$(this).tooltip('show')">
                <img src="/img/icon-tor.svg" class="colored" width="36" height="36">
                <img src="/img/icon-tor-gray.svg" class="gray" width="36" height="36">
            </button>
        </li>
                    </ul>
        </div>
    </div>
    <div class="footer-copyright w-3-2-show">
        <span class="w-5-show w-3-hide p-left-0">Free ebooks since 2009.</span>
        <span class="w-3-p-left-0">
            <a class="footer-mailto" href="mailto: support@bookmail.org">support@bookmail.org</a>
        </span>
        <span class=""> <a href="/faq.php">FAQ</a></span>
        <span class=""> <a href="/blog/">Blog</a></span>
    </div>
    <div class="footer-right w-4-2-left">
        <div class="footer-nav-right" role="navigation">
            <ul class="nav navbar-nav">
                
        <li class="icon-link">
            <a href="/android" title="<div style='white-space: nowrap;'>ZLibrary app</div>" data-toggle="tooltip" data-html="true" onmouseover="$(this).tooltip('show')">
                <img src="/img/icon-android.svg" class="colored" width="36" height="36">
                <img src="/img/icon-android-gray.svg" class="gray" width="36" height="36">
            </a>
        </li>
        
        <li class="icon-link">
            <button onclick="window.location.replace('http://loginzlib2vrak5zzpcocc3ouizykn6k5qecgj2tzlnab5wcbqhembyd.onion')" data-toggle="tooltip" data-placement="top" data-html="true" title="<div style='white-space: nowrap;'>TOR version</div>" onmouseover="$(this).tooltip('show')">
                <img src="/img/icon-tor.svg" class="colored" width="36" height="36">
                <img src="/img/icon-tor-gray.svg" class="gray" width="36" height="36">
            </button>
        </li>
                                            <li class="find-the-error w-4-hide">Found an error                        <i class="tooltip-init" data-placement="top" title="<div style='width: 160px'>To report a spelling error, select the text and click Ctrl+Enter</div>"></i>
                    </li>
                                <li class="w-4-p-left-0"><a href="/privacy.php">Privacy</a></li>
                <li><a href="/dmca.php">DMCA</a></li>
                <li class="dropup p-right-0" style="white-space: nowrap;">
                    <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
    English <span class="caret"></span>
</a>
<ul class="dropdown-menu language-list" id="footerLanguageList">
<li><a href="//b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=en" data-language_code="en">English</a></li><li><a href="//ru.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=ru" data-language_code="ru">Русский</a></li><li><a href="//es.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=es" data-language_code="es">Español</a></li><li><a href="//it.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=it" data-language_code="it">Italiano</a></li><li><a href="//el.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=el" data-language_code="el">ελληνικά</a></li><li><a href="//ar.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=ar" data-language_code="ar">اللغة العربية</a></li><li><a href="//id.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=id" data-language_code="id">Bahasa Indonesia</a></li><li><a href="//ms.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=ms" data-language_code="ms">Bahasa Malaysia</a></li><li><a href="//hi.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=hi" data-language_code="hi">हिन्दी</a></li><li><a href="//de.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=de" data-language_code="de">Deutsch</a></li><li><a href="//fr.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=fr" data-language_code="fr">Français</a></li><li><a href="//pt.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=pt" data-language_code="pt">Português</a></li><li><a href="//uk.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=uk" data-language_code="uk">Українська</a></li><li><a href="//pl.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=pl" data-language_code="pl">Polski</a></li><li><a href="//zh.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=zh" data-language_code="zh">汉语</a></li><li><a href="//ja.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=ja" data-language_code="ja">日本語</a></li><li><a href="//vi.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=vi" data-language_code="vi">Tiếng Việt</a></li><li><a href="//az.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=az" data-language_code="az">Azərbaycan Dili</a></li><li><a href="//hy.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=hy" data-language_code="hy">Հայոց լեզու</a></li><li><a href="//th.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=th" data-language_code="th">ภาษาไทย</a></li><li><a href="//tr.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=tr" data-language_code="tr">Türk Dili</a></li><li><a href="//ka.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=ka" data-language_code="ka">ქართველი</a></li><li><a href="//bn.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=bn" data-language_code="bn">বাংলা</a></li><li><a href="//ps.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=ps" data-language_code="ps">پښتو</a></li><li><a href="//te.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=te" data-language_code="te">తెలుగు</a></li><li><a href="//ur.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=ur" data-language_code="ur">اردو</a></li><li><a href="//ko.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=ko" data-language_code="ko">한국어</a></li><li><a href="//sr.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=sr" data-language_code="sr">Srpski</a></li><li><a href="//bg.b-ok.asia/book/2885365/379e5a/?wrongHash=&switchLanguage=bg" data-language_code="bg">Български</a></li></ul>

                </li>
            </ul>
        </div>
    </div>
</div>

<!-- Telegram modal helper -->
<div style="display: none" id="tg-connect-modal">
    <div class="tg-connect-modal-content">
        <h3>If the Telegram application is installed on your device, please click the button below and allow the website to open Telegram</h3>
        <button class="btn z-btn btn-primary tg-connect-modal-content__open-button" id="startTelegram">Start Bot</button>
        <p class="tg-connect-modal-content__delimiter">OR</p>
        <h2>Please find our Telegram bot by the username below</h2>
        <div class="copybox-container" style="margin-bottom: 10px;">
            <input class="copybox-field tg-bot-login" type="text" readonly>
            <a href="javascript://" class="copybox-copy-btn btn btn-primary">Copy</a>
        </div>

        <h2>Then send the following text to the bot</h2>
        <div class="copybox-container">
            <input class="copybox-field tg-bot-command" type="text" readonly>
            <a href="javascript://" class="copybox-copy-btn btn btn-primary">Copy</a>
        </div>

        <div class="modal-footer">
            <button onclick="$(this).closest('.modal').modal('hide')">Close</button>
        </div>
    </div>
</div>

</div>
                    </td>
                </tr>
            </tbody>
        </table>

        <!-- icons preload hack -->
        <i class="zlibicon-check" style="font-size: 1px; visibility: hidden; position: absolute; top: 0; left: 0;"></i>

        <div class="modal fade" id="zlibrary-modal" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header hidden">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title"></h4>
                    </div>
                    <div class="modal-body" style="position: relative; min-height: 80px;"></div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="zlibrary-modal-styled" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">                    
                    <div class="modal-header hidden">
                        <h1 class="modal-title"></h1>
                    </div>
                    <div class="modal-body"></div>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>    
                </div>
            </div>
        </div>

        <div class="modal fade" id="zlibrary-modal-auth" tabindex="-1" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-body"></div>
                </div>
            </div>
        </div>
        
        <!-- ggAdditionalHtml -->
        <!--LiveInternet counter--><script type="text/javascript">
new Image().src = "//counter.yadro.ru/hit;bookzz?r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random();</script><!--/LiveInternet-->

<iframe name="uploader" id="uploader" style="border:0px solid #ddd; width:90%; display:none;"></iframe><script></script>        <!-- /ggAdditionalHtml -->
        
                
        <script>
            if (typeof pagerOptions !== "undefined" && pagerOptions) {
                $('div.paginator').paginator(pagerOptions);
                let page = parseInt((new URL(document.location)).searchParams.get("page"));
                if (page > pagerOptions.pagesTotal) document.location.href = document.location.href.replace(/page=\d+/gi, "page="+pagerOptions.pagesTotal);
            }
        </script>
    </body>
</html>

